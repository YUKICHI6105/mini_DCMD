
mini_DCMDc6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000000c  0800285c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800285c  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7db  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8a  00000000  00000000  0002d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  000303c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d26  00000000  00000000  00030fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbad  00000000  00000000  00049d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ddd  00000000  00000000  000578bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000df6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002810 	.word	0x08002810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002810 	.word	0x08002810

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbd0 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9a6 	bl	80004a8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f864 	bl	8000228 <MX_CAN_Init>
  MX_USB_PCD_Init();
 8000160:	f000 f980 	bl	8000464 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000164:	f000 f92a 	bl	80003bc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000168:	f000 f894 	bl	8000294 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
main_cpp();
 800016c:	f000 fb7c 	bl	8000868 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000170:	e7fe      	b.n	8000170 <main+0x24>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fb3d 	bl	8002800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 f899 	bl	8001300 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d4:	f000 f9c0 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fb05 	bl	8001804 <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000200:	f000 f9aa 	bl	8000558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000204:	2310      	movs	r3, #16
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fc5e 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xac>
  {
    Error_Handler();
 800021a:	f000 f99d 	bl	8000558 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3750      	adds	r7, #80	; 0x50
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800022c:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_CAN_Init+0x64>)
 800022e:	4a18      	ldr	r2, [pc, #96]	; (8000290 <MX_CAN_Init+0x68>)
 8000230:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <MX_CAN_Init+0x64>)
 8000234:	2202      	movs	r2, #2
 8000236:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_CAN_Init+0x64>)
 8000246:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800024a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_CAN_Init+0x64>)
 800024e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000252:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <MX_CAN_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_CAN_Init+0x64>)
 800025c:	2201      	movs	r2, #1
 800025e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_CAN_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_CAN_Init+0x64>)
 8000268:	2201      	movs	r2, #1
 800026a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <MX_CAN_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_CAN_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_CAN_Init+0x64>)
 800027a:	f000 fbc1 	bl	8000a00 <HAL_CAN_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000284:	f000 f968 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	40006400 	.word	0x40006400

08000294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b092      	sub	sp, #72	; 0x48
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800029a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2220      	movs	r2, #32
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fa9e 	bl	8002800 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002c4:	4b3b      	ldr	r3, [pc, #236]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <MX_TIM1_Init+0x124>)
 80002c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002ca:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80002d0:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002d2:	2220      	movs	r2, #32
 80002d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2250-1;
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002d8:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80002dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80002de:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002e6:	4b33      	ldr	r3, [pc, #204]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002f2:	4830      	ldr	r0, [pc, #192]	; (80003b4 <MX_TIM1_Init+0x120>)
 80002f4:	f001 fca2 	bl	8001c3c <HAL_TIM_PWM_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f92b 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800030a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800030e:	4619      	mov	r1, r3
 8000310:	4828      	ldr	r0, [pc, #160]	; (80003b4 <MX_TIM1_Init+0x120>)
 8000312:	f002 f947 	bl	80025a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800031c:	f000 f91c 	bl	8000558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000320:	2360      	movs	r3, #96	; 0x60
 8000322:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 8000324:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000328:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032a:	2300      	movs	r3, #0
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800032e:	2300      	movs	r3, #0
 8000330:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000332:	2300      	movs	r3, #0
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800033e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000342:	2204      	movs	r2, #4
 8000344:	4619      	mov	r1, r3
 8000346:	481b      	ldr	r0, [pc, #108]	; (80003b4 <MX_TIM1_Init+0x120>)
 8000348:	f001 fe6a 	bl	8002020 <HAL_TIM_PWM_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000352:	f000 f901 	bl	8000558 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035e:	2208      	movs	r2, #8
 8000360:	4619      	mov	r1, r3
 8000362:	4814      	ldr	r0, [pc, #80]	; (80003b4 <MX_TIM1_Init+0x120>)
 8000364:	f001 fe5c 	bl	8002020 <HAL_TIM_PWM_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800036e:	f000 f8f3 	bl	8000558 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <MX_TIM1_Init+0x120>)
 8000396:	f002 f95d 	bl	8002654 <HAL_TIMEx_ConfigBreakDeadTime>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80003a0:	f000 f8da 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <MX_TIM1_Init+0x120>)
 80003a6:	f000 f9df 	bl	8000768 <HAL_TIM_MspPostInit>

}
 80003aa:	bf00      	nop
 80003ac:	3748      	adds	r7, #72	; 0x48
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000050 	.word	0x20000050
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2224      	movs	r2, #36	; 0x24
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 fa18 	bl	8002800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_TIM3_Init+0xa0>)
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <MX_TIM3_Init+0xa4>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_TIM3_Init+0xa0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM3_Init+0xa0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM3_Init+0xa0>)
 80003ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM3_Init+0xa0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_TIM3_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003fe:	2301      	movs	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000416:	2301      	movs	r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <MX_TIM3_Init+0xa0>)
 800042a:	f001 fd57 	bl	8001edc <HAL_TIM_Encoder_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000434:	f000 f890 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_TIM3_Init+0xa0>)
 8000446:	f002 f8ad 	bl	80025a4 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000450:	f000 f882 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3730      	adds	r7, #48	; 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000098 	.word	0x20000098
 8000460:	40000400 	.word	0x40000400

08000464 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <MX_USB_PCD_Init+0x40>)
 800046c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 8000470:	2208      	movs	r2, #8
 8000472:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 8000476:	2202      	movs	r2, #2
 8000478:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_USB_PCD_Init+0x3c>)
 800048e:	f000 fe2b 	bl	80010e8 <HAL_PCD_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000498:	f000 f85e 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	40005c00 	.word	0x40005c00

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a23      	ldr	r2, [pc, #140]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a17      	ldr	r2, [pc, #92]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_GPIO_Init+0xa8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_GPIO_Init+0xa8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_GPIO_Init+0xa8>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_GPIO_Init+0xa8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0xac>)
 8000524:	f000 fdc8 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin;
 8000528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_GPIO_Init+0xac>)
 8000542:	f000 fc3d 	bl	8000dc0 <HAL_GPIO_Init>

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40011000 	.word	0x40011000

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a25      	ldr	r2, [pc, #148]	; (8000678 <HAL_CAN_MspInit+0xb0>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d143      	bne.n	8000670 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <HAL_CAN_MspInit+0xb4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_CAN_MspInit+0xb4>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_CAN_MspInit+0xb4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <HAL_CAN_MspInit+0xb8>)
 800062e:	f000 fbc7 	bl	8000dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <HAL_CAN_MspInit+0xb8>)
 8000648:	f000 fbba 	bl	8000dc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <HAL_CAN_MspInit+0xbc>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_CAN_MspInit+0xbc>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000670:	bf00      	nop
 8000672:	3728      	adds	r7, #40	; 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40006400 	.word	0x40006400
 800067c:	40021000 	.word	0x40021000
 8000680:	40010c00 	.word	0x40010c00
 8000684:	40010000 	.word	0x40010000

08000688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_TIM_PWM_MspInit+0x34>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10b      	bne.n	80006b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40012c00 	.word	0x40012c00
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_TIM_Encoder_MspInit+0x94>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d135      	bne.n	8000750 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	61d3      	str	r3, [r2, #28]
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a16      	ldr	r2, [pc, #88]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_TIM_Encoder_MspInit+0x98>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000714:	2330      	movs	r3, #48	; 0x30
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000728:	f000 fb4a 	bl	8000dc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_TIM_Encoder_MspInit+0xa0>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_TIM_Encoder_MspInit+0xa0>)
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40000400 	.word	0x40000400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_TIM_MspPostInit+0x5c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d118      	bne.n	80007ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_TIM_MspPostInit+0x60>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_TIM_MspPostInit+0x60>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_TIM_MspPostInit+0x60>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_TIM_MspPostInit+0x64>)
 80007b6:	f000 fb03 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40012c00 	.word	0x40012c00
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_PCD_MspInit+0x34>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_PCD_MspInit+0x38>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_PCD_MspInit+0x38>)
 80007e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_PCD_MspInit+0x38>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40005c00 	.word	0x40005c00
 8000808:	40021000 	.word	0x40021000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f895 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
	...

08000868 <main_cpp>:
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim3;
}

void main_cpp(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 800086c:	2104      	movs	r1, #4
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <main_cpp+0x38>)
 8000870:	f001 fa34 	bl	8001cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <main_cpp+0x3c>)
 8000878:	f001 fa30 	bl	8001cdc <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000880:	f000 f89a 	bl	80009b8 <HAL_Delay>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8000884:	2104      	movs	r1, #4
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <main_cpp+0x38>)
 8000888:	f001 fac4 	bl	8001e14 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <main_cpp+0x3c>)
 8000890:	f001 fac0 	bl	8001e14 <HAL_TIM_PWM_Stop>
    HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000898:	f000 f88e 	bl	80009b8 <HAL_Delay>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000050 	.word	0x20000050
 80008a4:	20000098 	.word	0x20000098

080008a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ce:	f7ff ffc4 	bl	800085a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 ff71 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fc39 	bl	800014c <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	200003d0 	.word	0x200003d0

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 fa27 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fe28 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa31 	bl	8000da6 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 fa07 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x20>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000008 	.word	0x20000008
 80009a0:	200003cc 	.word	0x200003cc

080009a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	200003cc 	.word	0x200003cc

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff fff0 	bl	80009a4 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffe0 	bl	80009a4 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008

08000a00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0ed      	b.n	8000bee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fdd2 	bl	80005c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0201 	orr.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a34:	f7ff ffb6 	bl	80009a4 <HAL_GetTick>
 8000a38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3a:	e012      	b.n	8000a62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a3c:	f7ff ffb2 	bl	80009a4 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	d90b      	bls.n	8000a62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2205      	movs	r2, #5
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e0c5      	b.n	8000bee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0e5      	beq.n	8000a3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 0202 	bic.w	r2, r2, #2
 8000a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a80:	f7ff ff90 	bl	80009a4 <HAL_GetTick>
 8000a84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a86:	e012      	b.n	8000aae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a88:	f7ff ff8c 	bl	80009a4 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d90b      	bls.n	8000aae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e09f      	b.n	8000bee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e5      	bne.n	8000a88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7e1b      	ldrb	r3, [r3, #24]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d108      	bne.n	8000ad6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7e5b      	ldrb	r3, [r3, #25]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d108      	bne.n	8000b00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7e9b      	ldrb	r3, [r3, #26]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0220 	orr.w	r2, r2, #32
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0220 	bic.w	r2, r2, #32
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7edb      	ldrb	r3, [r3, #27]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d108      	bne.n	8000b54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0210 	bic.w	r2, r2, #16
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e007      	b.n	8000b64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f042 0210 	orr.w	r2, r2, #16
 8000b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7f1b      	ldrb	r3, [r3, #28]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 0208 	orr.w	r2, r2, #8
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0208 	bic.w	r2, r2, #8
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7f5b      	ldrb	r3, [r3, #29]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f042 0204 	orr.w	r2, r2, #4
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0204 	bic.w	r2, r2, #4
 8000bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	ea42 0103 	orr.w	r1, r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	1e5a      	subs	r2, r3, #1
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff90 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff49 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5e 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff90 	bl	8000cb0 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e161      	b.n	8001098 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8150 	bne.w	8001092 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a97      	ldr	r2, [pc, #604]	; (8001054 <HAL_GPIO_Init+0x294>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d05e      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000dfc:	4a95      	ldr	r2, [pc, #596]	; (8001054 <HAL_GPIO_Init+0x294>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d875      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e02:	4a95      	ldr	r2, [pc, #596]	; (8001058 <HAL_GPIO_Init+0x298>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d058      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e08:	4a93      	ldr	r2, [pc, #588]	; (8001058 <HAL_GPIO_Init+0x298>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d86f      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e0e:	4a93      	ldr	r2, [pc, #588]	; (800105c <HAL_GPIO_Init+0x29c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d052      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e14:	4a91      	ldr	r2, [pc, #580]	; (800105c <HAL_GPIO_Init+0x29c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d869      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e1a:	4a91      	ldr	r2, [pc, #580]	; (8001060 <HAL_GPIO_Init+0x2a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d04c      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e20:	4a8f      	ldr	r2, [pc, #572]	; (8001060 <HAL_GPIO_Init+0x2a0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d863      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e26:	4a8f      	ldr	r2, [pc, #572]	; (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d046      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e2c:	4a8d      	ldr	r2, [pc, #564]	; (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d85d      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d82a      	bhi.n	8000e8c <HAL_GPIO_Init+0xcc>
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d859      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <HAL_GPIO_Init+0x80>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000ebb 	.word	0x08000ebb
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000ea7 	.word	0x08000ea7
 8000e4c:	08000ee9 	.word	0x08000ee9
 8000e50:	08000eef 	.word	0x08000eef
 8000e54:	08000eef 	.word	0x08000eef
 8000e58:	08000eef 	.word	0x08000eef
 8000e5c:	08000eef 	.word	0x08000eef
 8000e60:	08000eef 	.word	0x08000eef
 8000e64:	08000eef 	.word	0x08000eef
 8000e68:	08000eef 	.word	0x08000eef
 8000e6c:	08000eef 	.word	0x08000eef
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000eef 	.word	0x08000eef
 8000e7c:	08000eef 	.word	0x08000eef
 8000e80:	08000eef 	.word	0x08000eef
 8000e84:	08000e9d 	.word	0x08000e9d
 8000e88:	08000eb1 	.word	0x08000eb1
 8000e8c:	4a76      	ldr	r2, [pc, #472]	; (8001068 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e92:	e02c      	b.n	8000eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e029      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e024      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e01f      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e01a      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e013      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d105      	bne.n	8000edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	611a      	str	r2, [r3, #16]
          break;
 8000eda:	e009      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	615a      	str	r2, [r3, #20]
          break;
 8000ee6:	e003      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          break;
 8000eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d801      	bhi.n	8000efa <HAL_GPIO_Init+0x13a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <HAL_GPIO_Init+0x13e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d802      	bhi.n	8000f0c <HAL_GPIO_Init+0x14c>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x152>
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3b08      	subs	r3, #8
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	210f      	movs	r1, #15
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	401a      	ands	r2, r3
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80a9 	beq.w	8001092 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <HAL_GPIO_Init+0x2ac>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a49      	ldr	r2, [pc, #292]	; (800106c <HAL_GPIO_Init+0x2ac>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <HAL_GPIO_Init+0x2ac>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f58:	4a45      	ldr	r2, [pc, #276]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <HAL_GPIO_Init+0x2b4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3c      	ldr	r2, [pc, #240]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x1dc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_GPIO_Init+0x1d8>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e004      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb2:	492f      	ldr	r1, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	492b      	ldr	r1, [pc, #172]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4921      	ldr	r1, [pc, #132]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	491d      	ldr	r1, [pc, #116]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 800100c:	4013      	ands	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	4917      	ldr	r1, [pc, #92]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4913      	ldr	r1, [pc, #76]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8001034:	4013      	ands	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01f      	beq.n	8001084 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	490d      	ldr	r1, [pc, #52]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
 8001050:	e01f      	b.n	8001092 <HAL_GPIO_Init+0x2d2>
 8001052:	bf00      	nop
 8001054:	10320000 	.word	0x10320000
 8001058:	10310000 	.word	0x10310000
 800105c:	10220000 	.word	0x10220000
 8001060:	10210000 	.word	0x10210000
 8001064:	10120000 	.word	0x10120000
 8001068:	10110000 	.word	0x10110000
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00
 800107c:	40011000 	.word	0x40011000
 8001080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_GPIO_Init+0x2f4>)
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	43db      	mvns	r3, r3
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <HAL_GPIO_Init+0x2f4>)
 800108e:	4013      	ands	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3301      	adds	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f47f ae96 	bne.w	8000dd4 <HAL_GPIO_Init+0x14>
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	372c      	adds	r7, #44	; 0x2c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	611a      	str	r2, [r3, #16]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b08b      	sub	sp, #44	; 0x2c
 80010ec:	af06      	add	r7, sp, #24
 80010ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0fd      	b.n	80012f6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fb5e 	bl	80007d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2203      	movs	r2, #3
 8001118:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 faf8 	bl	8002716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	687e      	ldr	r6, [r7, #4]
 800112e:	466d      	mov	r5, sp
 8001130:	f106 0410 	add.w	r4, r6, #16
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	602b      	str	r3, [r5, #0]
 800113c:	1d33      	adds	r3, r6, #4
 800113e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f001 fad8 	bl	80026f6 <USB_CoreInit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0ce      	b.n	80012f6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f001 faf3 	bl	800274a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e04c      	b.n	8001204 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	3301      	adds	r3, #1
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	b298      	uxth	r0, r3
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	3336      	adds	r3, #54	; 0x36
 80011a8:	4602      	mov	r2, r0
 80011aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3303      	adds	r3, #3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	3338      	adds	r3, #56	; 0x38
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	333c      	adds	r3, #60	; 0x3c
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3340      	adds	r3, #64	; 0x40
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	3301      	adds	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3ad      	bcc.n	800116a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e044      	b.n	800129e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	3301      	adds	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b5      	bcc.n	8001214 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	687e      	ldr	r6, [r7, #4]
 80012b0:	466d      	mov	r5, sp
 80012b2:	f106 0410 	add.w	r4, r6, #16
 80012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	602b      	str	r3, [r5, #0]
 80012be:	1d33      	adds	r3, r6, #4
 80012c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f001 fa4d 	bl	8002762 <USB_DevInit>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00d      	b.n	80012f6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fa57 	bl	80027a2 <USB_DevDisconnect>

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e272      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8087 	beq.w	800142e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001320:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b04      	cmp	r3, #4
 800132a:	d00c      	beq.n	8001346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800132c:	4b8f      	ldr	r3, [pc, #572]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d112      	bne.n	800135e <HAL_RCC_OscConfig+0x5e>
 8001338:	4b8c      	ldr	r3, [pc, #560]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d10b      	bne.n	800135e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d06c      	beq.n	800142c <HAL_RCC_OscConfig+0x12c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d168      	bne.n	800142c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e24c      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x76>
 8001368:	4b80      	ldr	r3, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a7f      	ldr	r2, [pc, #508]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800136e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	e02e      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x98>
 800137e:	4b7b      	ldr	r3, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7a      	ldr	r2, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b78      	ldr	r3, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e01d      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0xbc>
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a71      	ldr	r2, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6e      	ldr	r2, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 80013bc:	4b6b      	ldr	r3, [pc, #428]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a67      	ldr	r2, [pc, #412]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fae2 	bl	80009a4 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fade 	bl	80009a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e200      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe4>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff face 	bl	80009a4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff faca 	bl	80009a4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1ec      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x10c>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d063      	beq.n	8001502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d11c      	bne.n	800148c <HAL_RCC_OscConfig+0x18c>
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d116      	bne.n	800148c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <HAL_RCC_OscConfig+0x176>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e1c0      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4939      	ldr	r1, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	e03a      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x270>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa83 	bl	80009a4 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fa7f 	bl	80009a4 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1a1      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4927      	ldr	r1, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x270>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fa62 	bl	80009a4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff fa5e 	bl	80009a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e180      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d03a      	beq.n	8001584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_RCC_OscConfig+0x274>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff fa42 	bl	80009a4 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fa3e 	bl	80009a4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e160      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f000 faa6 	bl	8001a94 <RCC_Delay>
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_RCC_OscConfig+0x274>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fa28 	bl	80009a4 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	e00f      	b.n	8001578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fa24 	bl	80009a4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d908      	bls.n	8001578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e146      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	42420000 	.word	0x42420000
 8001574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e9      	bne.n	8001558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a6 	beq.w	80016de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7e      	ldr	r2, [pc, #504]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff f9e5 	bl	80009a4 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff f9e1 	bl	80009a4 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e103      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x312>
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	e02d      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x334>
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	e01c      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x356>
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a5a      	ldr	r2, [pc, #360]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f995 	bl	80009a4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff f991 	bl	80009a4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0b1      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <HAL_RCC_OscConfig+0x37e>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f97f 	bl	80009a4 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff f97b 	bl	80009a4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e09b      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d061      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d146      	bne.n	800178a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f94f 	bl	80009a4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f94b 	bl	80009a4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e06d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d108      	bne.n	8001744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a19      	ldr	r1, [r3, #32]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	430b      	orrs	r3, r1
 8001756:	491b      	ldr	r1, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff f91f 	bl	80009a4 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f91b 	bl	80009a4 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x46a>
 8001788:	e035      	b.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff f908 	bl	80009a4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f904 	bl	80009a4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e026      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x498>
 80017b6:	e01e      	b.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e019      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x500>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0d0      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d910      	bls.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	4965      	ldr	r1, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d040      	beq.n	8001924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e073      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06b      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4936      	ldr	r1, [pc, #216]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f856 	bl	80009a4 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f852 	bl	80009a4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e053      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d210      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4922      	ldr	r1, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1cc>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ffb4 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002838 	.word	0x08002838
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b490      	push	{r4, r7}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xac>)
 80019e0:	1d3c      	adds	r4, r7, #4
 80019e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e8:	f240 2301 	movw	r3, #513	; 0x201
 80019ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x46>
 8001a16:	e02b      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a1a:	623b      	str	r3, [r7, #32]
      break;
 8001a1c:	e02b      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3328      	adds	r3, #40	; 0x28
 8001a28:	443b      	add	r3, r7
 8001a2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0c5b      	lsrs	r3, r3, #17
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	3328      	adds	r3, #40	; 0x28
 8001a46:	443b      	add	r3, r7
 8001a48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a52:	fb03 f202 	mul.w	r2, r3, r2
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	e004      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	623b      	str	r3, [r7, #32]
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a72:	623b      	str	r3, [r7, #32]
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc90      	pop	{r4, r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	08002828 	.word	0x08002828
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	007a1200 	.word	0x007a1200
 8001a90:	003d0900 	.word	0x003d0900

08001a94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <RCC_Delay+0x34>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <RCC_Delay+0x38>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0a5b      	lsrs	r3, r3, #9
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ab0:	bf00      	nop
  }
  while (Delay --);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	60fa      	str	r2, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <RCC_Delay+0x1c>
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	10624dd3 	.word	0x10624dd3

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d07d      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af0:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10d      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	61d3      	str	r3, [r2, #28]
 8001b08:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d118      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b30:	f7fe ff38 	bl	80009a4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	e008      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7fe ff34 	bl	80009a4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e06d      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02e      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d027      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d014      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe ff03 	bl	80009a4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe feff 	bl	80009a4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e036      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4917      	ldr	r1, [pc, #92]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	490b      	ldr	r1, [pc, #44]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4904      	ldr	r1, [pc, #16]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42420440 	.word	0x42420440

08001c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fd10 	bl	8000688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 fa8e 	bl	800219c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_TIM_PWM_Start+0x24>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e022      	b.n	8001d46 <HAL_TIM_PWM_Start+0x6a>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d109      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x3e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	e015      	b.n	8001d46 <HAL_TIM_PWM_Start+0x6a>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d109      	bne.n	8001d34 <HAL_TIM_PWM_Start+0x58>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e008      	b.n	8001d46 <HAL_TIM_PWM_Start+0x6a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e059      	b.n	8001e02 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d104      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x82>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d5c:	e013      	b.n	8001d86 <HAL_TIM_PWM_Start+0xaa>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_PWM_Start+0x92>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d6c:	e00b      	b.n	8001d86 <HAL_TIM_PWM_Start+0xaa>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d104      	bne.n	8001d7e <HAL_TIM_PWM_Start+0xa2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d7c:	e003      	b.n	8001d86 <HAL_TIM_PWM_Start+0xaa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fbe4 	bl	800255c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_TIM_PWM_Start+0x130>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d107      	bne.n	8001dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <HAL_TIM_PWM_Start+0x130>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_PWM_Start+0xf0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_PWM_Start+0xf0>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_PWM_Start+0x134>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d010      	beq.n	8001e00 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40000400 	.word	0x40000400

08001e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fb98 	bl	800255c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_TIM_PWM_Stop+0xc4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d117      	bne.n	8001e66 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_PWM_Stop+0x52>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_PWM_Stop+0x52>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_TIM_PWM_Stop+0x82>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_PWM_Stop+0x82>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d104      	bne.n	8001ea6 <HAL_TIM_PWM_Stop+0x92>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea4:	e013      	b.n	8001ece <HAL_TIM_PWM_Stop+0xba>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d104      	bne.n	8001eb6 <HAL_TIM_PWM_Stop+0xa2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb4:	e00b      	b.n	8001ece <HAL_TIM_PWM_Stop+0xba>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d104      	bne.n	8001ec6 <HAL_TIM_PWM_Stop+0xb2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec4:	e003      	b.n	8001ece <HAL_TIM_PWM_Stop+0xba>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e093      	b.n	8002018 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7fe fbdd 	bl	80006c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f20:	f023 0307 	bic.w	r3, r3, #7
 8001f24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f000 f933 	bl	800219c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f7c:	f023 030c 	bic.w	r3, r3, #12
 8001f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	011a      	lsls	r2, r3, #4
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	031b      	lsls	r3, r3, #12
 8001fac:	4313      	orrs	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001fba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002036:	2302      	movs	r3, #2
 8002038:	e0ac      	b.n	8002194 <HAL_TIM_PWM_ConfigChannel+0x174>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	f200 809f 	bhi.w	8002188 <HAL_TIM_PWM_ConfigChannel+0x168>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002085 	.word	0x08002085
 8002054:	08002189 	.word	0x08002189
 8002058:	08002189 	.word	0x08002189
 800205c:	08002189 	.word	0x08002189
 8002060:	080020c5 	.word	0x080020c5
 8002064:	08002189 	.word	0x08002189
 8002068:	08002189 	.word	0x08002189
 800206c:	08002189 	.word	0x08002189
 8002070:	08002107 	.word	0x08002107
 8002074:	08002189 	.word	0x08002189
 8002078:	08002189 	.word	0x08002189
 800207c:	08002189 	.word	0x08002189
 8002080:	08002147 	.word	0x08002147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f8de 	bl	800224c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0208 	orr.w	r2, r2, #8
 800209e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	619a      	str	r2, [r3, #24]
      break;
 80020c2:	e062      	b.n	800218a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f924 	bl	8002318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	021a      	lsls	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
      break;
 8002104:	e041      	b.n	800218a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f96d 	bl	80023ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0208 	orr.w	r2, r2, #8
 8002120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69d9      	ldr	r1, [r3, #28]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
      break;
 8002144:	e021      	b.n	800218a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f9b7 	bl	80024c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69d9      	ldr	r1, [r3, #28]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	61da      	str	r2, [r3, #28]
      break;
 8002186:	e000      	b.n	800218a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <TIM_Base_SetConfig+0xa8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <TIM_Base_SetConfig+0x28>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d003      	beq.n	80021c4 <TIM_Base_SetConfig+0x28>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <TIM_Base_SetConfig+0xac>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <TIM_Base_SetConfig+0xa8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_Base_SetConfig+0x52>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d003      	beq.n	80021ee <TIM_Base_SetConfig+0x52>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <TIM_Base_SetConfig+0xac>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d108      	bne.n	8002200 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <TIM_Base_SetConfig+0xa8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400

0800224c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	f023 0201 	bic.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f023 0302 	bic.w	r3, r3, #2
 8002294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <TIM_OC1_SetConfig+0xc8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10c      	bne.n	80022c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0308 	bic.w	r3, r3, #8
 80022ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a13      	ldr	r2, [pc, #76]	; (8002314 <TIM_OC1_SetConfig+0xc8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d111      	bne.n	80022ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	621a      	str	r2, [r3, #32]
}
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40012c00 	.word	0x40012c00

08002318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0210 	bic.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0320 	bic.w	r3, r3, #32
 8002362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <TIM_OC2_SetConfig+0xd0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d10d      	bne.n	8002394 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800237e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <TIM_OC2_SetConfig+0xd0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d113      	bne.n	80023c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	621a      	str	r2, [r3, #32]
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00

080023ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <TIM_OC3_SetConfig+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10d      	bne.n	8002466 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <TIM_OC3_SetConfig+0xd0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d113      	bne.n	8002496 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800250a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	031b      	lsls	r3, r3, #12
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <TIM_OC4_SetConfig+0x98>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d109      	bne.n	8002534 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00

0800255c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2201      	movs	r2, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e041      	b.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d004      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10c      	bne.n	800262e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400

08002654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e03d      	b.n	80026ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026f6:	b084      	sub	sp, #16
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	f107 0014 	add.w	r0, r7, #20
 8002704:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	b004      	add	sp, #16
 8002714:	4770      	bx	lr

08002716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800271e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002722:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	b29b      	uxth	r3, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	4013      	ands	r3, r2
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002762:	b084      	sub	sp, #16
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	f107 0014 	add.w	r0, r7, #20
 8002770:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	b004      	add	sp, #16
 80027a0:	4770      	bx	lr

080027a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	2600      	movs	r6, #0
 80027bc:	4d0c      	ldr	r5, [pc, #48]	; (80027f0 <__libc_init_array+0x38>)
 80027be:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027c0:	1b64      	subs	r4, r4, r5
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	f000 f822 	bl	8002810 <_init>
 80027cc:	2600      	movs	r6, #0
 80027ce:	4d0a      	ldr	r5, [pc, #40]	; (80027f8 <__libc_init_array+0x40>)
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <__libc_init_array+0x44>)
 80027d2:	1b64      	subs	r4, r4, r5
 80027d4:	10a4      	asrs	r4, r4, #2
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	08002848 	.word	0x08002848
 80027f4:	08002848 	.word	0x08002848
 80027f8:	08002848 	.word	0x08002848
 80027fc:	0800284c 	.word	0x0800284c

08002800 <memset>:
 8002800:	4603      	mov	r3, r0
 8002802:	4402      	add	r2, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	d100      	bne.n	800280a <memset+0xa>
 8002808:	4770      	bx	lr
 800280a:	f803 1b01 	strb.w	r1, [r3], #1
 800280e:	e7f9      	b.n	8002804 <memset+0x4>

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr
