
mini_DCMDc6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080024f0  080024f0  000124f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800251c  0800251c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800251c  0800251c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800251c  0800251c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000020  08002544  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08002544  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d89  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a5  00000000  00000000  00037dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0003b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  0003bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a851  00000000  00000000  0003d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aeb  00000000  00000000  00057ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f8d  00000000  00000000  0006e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  001029c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000da07  00000000  00000000  001053a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d8 	.word	0x080024d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080024d8 	.word	0x080024d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000160:	2214      	movs	r2, #20
 8000162:	2100      	movs	r1, #0
 8000164:	a80c      	add	r0, sp, #48	; 0x30
 8000166:	f002 f9af 	bl	80024c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016a:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016e:	2100      	movs	r1, #0
 8000170:	eb0d 0002 	add.w	r0, sp, r2
 8000174:	f002 f9a8 	bl	80024c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000178:	462a      	mov	r2, r5
 800017a:	2100      	movs	r1, #0
 800017c:	a801      	add	r0, sp, #4
 800017e:	f002 f9a3 	bl	80024c8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000182:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000188:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800018a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000192:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000196:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000198:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800019a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800019c:	f001 f81e 	bl	80011dc <HAL_RCC_OscConfig>
 80001a0:	b108      	cbz	r0, 80001a6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001b2:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001b6:	4621      	mov	r1, r4
 80001b8:	a805      	add	r0, sp, #20
 80001ba:	f001 f9e5 	bl	8001588 <HAL_RCC_ClockConfig>
 80001be:	b108      	cbz	r0, 80001c4 <SystemClock_Config+0x68>
 80001c0:	b672      	cpsid	i
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001c4:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001c6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001c8:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ca:	f001 fa99 	bl	8001700 <HAL_RCCEx_PeriphCLKConfig>
 80001ce:	b108      	cbz	r0, 80001d4 <SystemClock_Config+0x78>
 80001d0:	b672      	cpsid	i
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <SystemClock_Config+0x76>
}
 80001d4:	b015      	add	sp, #84	; 0x54
 80001d6:	bd30      	pop	{r4, r5, pc}

080001d8 <main>:
{
 80001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001dc:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 80001de:	f000 fc29 	bl	8000a34 <HAL_Init>
  SystemClock_Config();
 80001e2:	f7ff ffbb 	bl	800015c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e6:	2210      	movs	r2, #16
 80001e8:	2100      	movs	r1, #0
 80001ea:	a811      	add	r0, sp, #68	; 0x44
 80001ec:	f002 f96c 	bl	80024c8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f0:	4b99      	ldr	r3, [pc, #612]	; (8000458 <main+0x280>)
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80001f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80001f8:	4898      	ldr	r0, [pc, #608]	; (800045c <main+0x284>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fa:	f042 0210 	orr.w	r2, r2, #16
 80001fe:	619a      	str	r2, [r3, #24]
 8000200:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000204:	f002 0210 	and.w	r2, r2, #16
 8000208:	9200      	str	r2, [sp, #0]
 800020a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000210:	f042 0220 	orr.w	r2, r2, #32
 8000214:	619a      	str	r2, [r3, #24]
 8000216:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000218:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021a:	f002 0220 	and.w	r2, r2, #32
 800021e:	9201      	str	r2, [sp, #4]
 8000220:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	699a      	ldr	r2, [r3, #24]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000224:	f44f 2850 	mov.w	r8, #851968	; 0xd0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	f042 0204 	orr.w	r2, r2, #4
 800022c:	619a      	str	r2, [r3, #24]
 800022e:	699a      	ldr	r2, [r3, #24]
 8000230:	f002 0204 	and.w	r2, r2, #4
 8000234:	9202      	str	r2, [sp, #8]
 8000236:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	f042 0208 	orr.w	r2, r2, #8
 800023e:	619a      	str	r2, [r3, #24]
 8000240:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000244:	f003 0308 	and.w	r3, r3, #8
 8000248:	9303      	str	r3, [sp, #12]
 800024a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 800024c:	f000 ff48 	bl	80010e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2101      	movs	r1, #1
 8000254:	4882      	ldr	r0, [pc, #520]	; (8000460 <main+0x288>)
 8000256:	f000 ff43 	bl	80010e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 800025e:	487f      	ldr	r0, [pc, #508]	; (800045c <main+0x284>)
 8000260:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	e9cd 4513 	strd	r4, r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 800026a:	f000 fe63 	bl	8000f34 <HAL_GPIO_Init>
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800026e:	487c      	ldr	r0, [pc, #496]	; (8000460 <main+0x288>)
 8000270:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000276:	e9cd 4513 	strd	r4, r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800027a:	f000 fe5b 	bl	8000f34 <HAL_GPIO_Init>
  hcan.Instance = CAN1;
 800027e:	4879      	ldr	r0, [pc, #484]	; (8000464 <main+0x28c>)
 8000280:	4b79      	ldr	r3, [pc, #484]	; (8000468 <main+0x290>)
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000282:	8384      	strh	r4, [r0, #28]
  hcan.Init.Prescaler = 2;
 8000284:	e9c0 3500 	strd	r3, r5, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800028c:	e9c0 8304 	strd	r8, r3, [r0, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000290:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8000294:	6183      	str	r3, [r0, #24]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000296:	e9c0 4402 	strd	r4, r4, [r0, #8]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800029a:	f000 fc01 	bl	8000aa0 <HAL_CAN_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	b108      	cbz	r0, 80002a6 <main+0xce>
 80002a2:	b672      	cpsid	i
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0xcc>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002a6:	2708      	movs	r7, #8
  hpcd_USB_FS.Instance = USB;
 80002a8:	4870      	ldr	r0, [pc, #448]	; (800046c <main+0x294>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002aa:	4a71      	ldr	r2, [pc, #452]	; (8000470 <main+0x298>)
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80002ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002b0:	e9c0 2700 	strd	r2, r7, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80002b4:	6085      	str	r5, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80002b6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80002b8:	f000 ff17 	bl	80010ea <HAL_PCD_Init>
 80002bc:	4604      	mov	r4, r0
 80002be:	b108      	cbz	r0, 80002c4 <main+0xec>
 80002c0:	b672      	cpsid	i
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <main+0xea>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80002c4:	f04f 0820 	mov.w	r8, #32
 80002c8:	4601      	mov	r1, r0
 80002ca:	4642      	mov	r2, r8
 80002cc:	a812      	add	r0, sp, #72	; 0x48
 80002ce:	f002 f8fb 	bl	80024c8 <memset>
  htim3.Instance = TIM3;
 80002d2:	4d68      	ldr	r5, [pc, #416]	; (8000474 <main+0x29c>)
 80002d4:	4b68      	ldr	r3, [pc, #416]	; (8000478 <main+0x2a0>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80002d6:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 80002d8:	e9c5 3400 	strd	r3, r4, [r5]
  htim3.Init.Period = 65535;
 80002dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80002e0:	a911      	add	r1, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e6:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ea:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002ee:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002f0:	9613      	str	r6, [sp, #76]	; 0x4c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002f2:	9617      	str	r6, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80002f4:	f001 fd2e 	bl	8001d54 <HAL_TIM_Encoder_Init>
 80002f8:	b108      	cbz	r0, 80002fe <main+0x126>
 80002fa:	b672      	cpsid	i
  while (1)
 80002fc:	e7fe      	b.n	80002fc <main+0x124>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fe:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000302:	a90a      	add	r1, sp, #40	; 0x28
 8000304:	4628      	mov	r0, r5
 8000306:	f001 feff 	bl	8002108 <HAL_TIMEx_MasterConfigSynchronization>
 800030a:	4605      	mov	r5, r0
 800030c:	b108      	cbz	r0, 8000312 <main+0x13a>
 800030e:	b672      	cpsid	i
  while (1)
 8000310:	e7fe      	b.n	8000310 <main+0x138>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000312:	4601      	mov	r1, r0
 8000314:	2210      	movs	r2, #16
 8000316:	a806      	add	r0, sp, #24
 8000318:	f002 f8d6 	bl	80024c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031c:	221c      	movs	r2, #28
 800031e:	4629      	mov	r1, r5
 8000320:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000322:	e9cd 5504 	strd	r5, r5, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000326:	f002 f8cf 	bl	80024c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032a:	4642      	mov	r2, r8
 800032c:	4629      	mov	r1, r5
 800032e:	a811      	add	r0, sp, #68	; 0x44
 8000330:	f002 f8ca 	bl	80024c8 <memset>
  htim1.Instance = TIM1;
 8000334:	4c51      	ldr	r4, [pc, #324]	; (800047c <main+0x2a4>)
 8000336:	4b52      	ldr	r3, [pc, #328]	; (8000480 <main+0x2a8>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000338:	f640 0ec9 	movw	lr, #2249	; 0x8c9
  htim1.Init.Prescaler = 0;
 800033c:	e9c4 3500 	strd	r3, r5, [r4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000340:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000344:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000346:	e9c4 e303 	strd	lr, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800034e:	f8c4 8008 	str.w	r8, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000352:	f001 fca7 	bl	8001ca4 <HAL_TIM_Base_Init>
 8000356:	b108      	cbz	r0, 800035c <main+0x184>
 8000358:	b672      	cpsid	i
  while (1)
 800035a:	e7fe      	b.n	800035a <main+0x182>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000360:	4620      	mov	r0, r4
 8000362:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000366:	f001 fddc 	bl	8001f22 <HAL_TIM_ConfigClockSource>
 800036a:	b108      	cbz	r0, 8000370 <main+0x198>
 800036c:	b672      	cpsid	i
  while (1)
 800036e:	e7fe      	b.n	800036e <main+0x196>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000370:	4620      	mov	r0, r4
 8000372:	f001 fcc3 	bl	8001cfc <HAL_TIM_PWM_Init>
 8000376:	b108      	cbz	r0, 800037c <main+0x1a4>
 8000378:	b672      	cpsid	i
  while (1)
 800037a:	e7fe      	b.n	800037a <main+0x1a2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037c:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000380:	a904      	add	r1, sp, #16
 8000382:	4620      	mov	r0, r4
 8000384:	f001 fec0 	bl	8002108 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	b108      	cbz	r0, 800038e <main+0x1b6>
 800038a:	b672      	cpsid	i
  while (1)
 800038c:	e7fe      	b.n	800038c <main+0x1b4>
  sConfigOC.Pulse = 300;
 800038e:	f04f 0c60 	mov.w	ip, #96	; 0x60
 8000392:	f44f 7396 	mov.w	r3, #300	; 0x12c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000396:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800039a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800039e:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003a0:	2204      	movs	r2, #4
 80003a2:	4620      	mov	r0, r4
 80003a4:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.Pulse = 300;
 80003a6:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003aa:	f001 fd55 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 80003ae:	b108      	cbz	r0, 80003b4 <main+0x1dc>
 80003b0:	b672      	cpsid	i
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <main+0x1da>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003b4:	463a      	mov	r2, r7
 80003b6:	4620      	mov	r0, r4
 80003b8:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.Pulse = 1;
 80003ba:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003bc:	f001 fd4c 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 80003c0:	b108      	cbz	r0, 80003c6 <main+0x1ee>
 80003c2:	b672      	cpsid	i
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <main+0x1ec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003c6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003cc:	482b      	ldr	r0, [pc, #172]	; (800047c <main+0x2a4>)
 80003ce:	a911      	add	r1, sp, #68	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003d0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80003d4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003d8:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003da:	9216      	str	r2, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003dc:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003de:	f001 febd 	bl	800215c <HAL_TIMEx_ConfigBreakDeadTime>
 80003e2:	4604      	mov	r4, r0
 80003e4:	b108      	cbz	r0, 80003ea <main+0x212>
 80003e6:	b672      	cpsid	i
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x210>
  HAL_TIM_MspPostInit(&htim1);
 80003ea:	4824      	ldr	r0, [pc, #144]	; (800047c <main+0x2a4>)
 80003ec:	f000 f93e 	bl	800066c <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 115200;
 80003f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80003f4:	4823      	ldr	r0, [pc, #140]	; (8000484 <main+0x2ac>)
  huart2.Init.BaudRate = 115200;
 80003f6:	4d24      	ldr	r5, [pc, #144]	; (8000488 <main+0x2b0>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80003fc:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000404:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040a:	f001 ff2f 	bl	800226c <HAL_UART_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	b108      	cbz	r0, 8000416 <main+0x23e>
 8000412:	b672      	cpsid	i
  while (1)
 8000414:	e7fe      	b.n	8000414 <main+0x23c>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000416:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 800041a:	481c      	ldr	r0, [pc, #112]	; (800048c <main+0x2b4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041c:	491c      	ldr	r1, [pc, #112]	; (8000490 <main+0x2b8>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800041e:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000426:	2202      	movs	r2, #2
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000430:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000434:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000436:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000438:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800043a:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800043e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000440:	f001 fa3c 	bl	80018bc <HAL_SPI_Init>
 8000444:	4604      	mov	r4, r0
 8000446:	b108      	cbz	r0, 800044c <main+0x274>
 8000448:	b672      	cpsid	i
  while (1)
 800044a:	e7fe      	b.n	800044a <main+0x272>
main_cpp();
 800044c:	f000 fa42 	bl	80008d4 <main_cpp>
}
 8000450:	4620      	mov	r0, r4
 8000452:	b01a      	add	sp, #104	; 0x68
 8000454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40011000 	.word	0x40011000
 8000460:	40010c00 	.word	0x40010c00
 8000464:	2000003c 	.word	0x2000003c
 8000468:	40006400 	.word	0x40006400
 800046c:	20000064 	.word	0x20000064
 8000470:	40005c00 	.word	0x40005c00
 8000474:	200003f0 	.word	0x200003f0
 8000478:	40000400 	.word	0x40000400
 800047c:	200003a8 	.word	0x200003a8
 8000480:	40012c00 	.word	0x40012c00
 8000484:	20000438 	.word	0x20000438
 8000488:	40004400 	.word	0x40004400
 800048c:	20000350 	.word	0x20000350
 8000490:	40013000 	.word	0x40013000

08000494 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_MspInit+0x3c>)
{
 8000496:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	f042 0201 	orr.w	r2, r2, #1
 800049e:	619a      	str	r2, [r3, #24]
 80004a0:	699a      	ldr	r2, [r3, #24]
 80004a2:	f002 0201 	and.w	r2, r2, #1
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	69da      	ldr	r2, [r3, #28]
 80004ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004b0:	61da      	str	r2, [r3, #28]
 80004b2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b4:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	6853      	ldr	r3, [r2, #4]
 80004c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	b002      	add	sp, #8
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	4604      	mov	r4, r0
 80004dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2210      	movs	r2, #16
 80004e0:	2100      	movs	r1, #0
 80004e2:	a802      	add	r0, sp, #8
 80004e4:	f001 fff0 	bl	80024c8 <memset>
  if(hcan->Instance==CAN1)
 80004e8:	6822      	ldr	r2, [r4, #0]
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <HAL_CAN_MspInit+0x7c>)
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d12e      	bne.n	800054e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004f0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80004f4:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	4818      	ldr	r0, [pc, #96]	; (8000558 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80004fc:	61da      	str	r2, [r3, #28]
 80004fe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000502:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	f042 0208 	orr.w	r2, r2, #8
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800051c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000520:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f000 fd07 	bl	8000f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	2302      	movs	r3, #2
 800052c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_CAN_MspInit+0x80>)
 8000534:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f000 fcfc 	bl	8000f34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_CAN_MspInit+0x84>)
 800053e:	6853      	ldr	r3, [r2, #4]
 8000540:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000544:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800054e:	b006      	add	sp, #24
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	40006400 	.word	0x40006400
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40010000 	.word	0x40010000

08000560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000560:	b510      	push	{r4, lr}
 8000562:	4604      	mov	r4, r0
 8000564:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	2210      	movs	r2, #16
 8000568:	2100      	movs	r1, #0
 800056a:	a802      	add	r0, sp, #8
 800056c:	f001 ffac 	bl	80024c8 <memset>
  if(hspi->Instance==SPI1)
 8000570:	6822      	ldr	r2, [r4, #0]
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <HAL_SPI_MspInit+0x6c>)
 8000574:	429a      	cmp	r2, r3
 8000576:	d126      	bne.n	80005c6 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000578:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800057c:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	4814      	ldr	r0, [pc, #80]	; (80005d0 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000580:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800058a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	f042 0204 	orr.w	r2, r2, #4
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f000 fcc0 	bl	8000f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f000 fcb7 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005c6:	b006      	add	sp, #24
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	bf00      	nop
 80005cc:	40013000 	.word	0x40013000
 80005d0:	40010800 	.word	0x40010800

080005d4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80005d4:	6802      	ldr	r2, [r0, #0]
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_TIM_Base_MspInit+0x24>)
{
 80005d8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80005da:	429a      	cmp	r2, r3
 80005dc:	d10a      	bne.n	80005f4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005de:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80005e2:	699a      	ldr	r2, [r3, #24]
 80005e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80005e8:	619a      	str	r2, [r3, #24]
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005f4:	b002      	add	sp, #8
 80005f6:	4770      	bx	lr
 80005f8:	40012c00 	.word	0x40012c00

080005fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005fc:	b510      	push	{r4, lr}
 80005fe:	4604      	mov	r4, r0
 8000600:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	2210      	movs	r2, #16
 8000604:	2100      	movs	r1, #0
 8000606:	a802      	add	r0, sp, #8
 8000608:	f001 ff5e 	bl	80024c8 <memset>
  if(htim_encoder->Instance==TIM3)
 800060c:	6822      	ldr	r2, [r4, #0]
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_TIM_Encoder_MspInit+0x64>)
 8000610:	429a      	cmp	r2, r3
 8000612:	d122      	bne.n	800065a <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000614:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000618:	69da      	ldr	r2, [r3, #28]
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800061c:	f042 0202 	orr.w	r2, r2, #2
 8000620:	61da      	str	r2, [r3, #28]
 8000622:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000626:	f002 0202 	and.w	r2, r2, #2
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	f042 0208 	orr.w	r2, r2, #8
 8000634:	619a      	str	r2, [r3, #24]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000640:	2330      	movs	r3, #48	; 0x30
 8000642:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f000 fc76 	bl	8000f34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_TIM_Encoder_MspInit+0x6c>)
 800064a:	6853      	ldr	r3, [r2, #4]
 800064c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000650:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000658:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800065a:	b006      	add	sp, #24
 800065c:	bd10      	pop	{r4, pc}
 800065e:	bf00      	nop
 8000660:	40000400 	.word	0x40000400
 8000664:	40010c00 	.word	0x40010c00
 8000668:	40010000 	.word	0x40010000

0800066c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800066c:	b510      	push	{r4, lr}
 800066e:	4604      	mov	r4, r0
 8000670:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	2210      	movs	r2, #16
 8000674:	2100      	movs	r1, #0
 8000676:	a802      	add	r0, sp, #8
 8000678:	f001 ff26 	bl	80024c8 <memset>
  if(htim->Instance==TIM1)
 800067c:	6822      	ldr	r2, [r4, #0]
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_TIM_MspPostInit+0x48>)
 8000680:	429a      	cmp	r2, r3
 8000682:	d114      	bne.n	80006ae <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000688:	699a      	ldr	r2, [r3, #24]
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	f042 0204 	orr.w	r2, r2, #4
 8000690:	619a      	str	r2, [r3, #24]
 8000692:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f000 fc43 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006ae:	b006      	add	sp, #24
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	bf00      	nop
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	40010800 	.word	0x40010800

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b510      	push	{r4, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	2210      	movs	r2, #16
 80006c4:	2100      	movs	r1, #0
 80006c6:	a802      	add	r0, sp, #8
 80006c8:	f001 fefe 	bl	80024c8 <memset>
  if(huart->Instance==USART2)
 80006cc:	6822      	ldr	r2, [r4, #0]
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_UART_MspInit+0x6c>)
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d126      	bne.n	8000722 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80006d8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80006dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006e0:	61da      	str	r2, [r3, #28]
 80006e2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	f042 0204 	orr.w	r2, r2, #4
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f000 fc12 	bl	8000f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2108      	movs	r1, #8
 8000712:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f000 fc09 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000722:	b006      	add	sp, #24
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	40004400 	.word	0x40004400
 800072c:	40010800 	.word	0x40010800

08000730 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000730:	6802      	ldr	r2, [r0, #0]
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_PCD_MspInit+0x24>)
{
 8000734:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 8000736:	429a      	cmp	r2, r3
 8000738:	d10a      	bne.n	8000750 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800073a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000744:	61da      	str	r2, [r3, #28]
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000750:	b002      	add	sp, #8
 8000752:	4770      	bx	lr
 8000754:	40005c00 	.word	0x40005c00

08000758 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler>

0800075a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler>

0800075c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler>

0800075e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler>

08000760 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler>

08000762 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 b976 	b.w	8000a58 <HAL_IncTick>

0800076c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	4770      	bx	lr
	...

08000770 <_ZN7CanCtrlC1Ev>:
	auto Canrx() -> std::optional<DataType>;//受信関数
	bool Canrx(uint32_t& RID,uint8_t data[8]);//受信関数(エラー判定のみ)内容は引数に入れ込む。
	void Canrx(uint8_t data[8],bool& RxError);
};

CanCtrl::CanCtrl(){
 8000770:	f240 73ff 	movw	r3, #2047	; 0x7ff
	TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
	TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
	TxHeader.DLC = 8;                       // データ長は8バイトに
 8000774:	2208      	movs	r2, #8
CanCtrl::CanCtrl(){
 8000776:	b510      	push	{r4, lr}
 8000778:	6003      	str	r3, [r0, #0]
	TxHeader.DLC = 8;                       // データ長は8バイトに
 800077a:	6242      	str	r2, [r0, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 800077c:	2300      	movs	r3, #0
	TxHeader.TransmitGlobalTime = DISABLE;  // ???
	filter.FilterIdHigh         = BID << 5;                 // フィルターIDの上位16ビット
 800077e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
	filter.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
	filter.FilterMaskIdHigh     = 0x7fc << 5;               // フィルターマスクの上位16ビット
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 8000782:	f64f 7180 	movw	r1, #65408	; 0xff80
	filter.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 8000786:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 800078a:	2206      	movs	r2, #6
	TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 800078c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 8000790:	e9c0 1214 	strd	r1, r2, [r0, #80]	; 0x50
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
	filter.FilterBank           = 0;                        // フィルターバンクNo
 8000794:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000798:	2201      	movs	r2, #1
	TxHeader.TransmitGlobalTime = DISABLE;  // ???
 800079a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 800079e:	6603      	str	r3, [r0, #96]	; 0x60
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80007a0:	230e      	movs	r3, #14
CanCtrl::CanCtrl(){
 80007a2:	4604      	mov	r4, r0
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80007a4:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80007a8:	6642      	str	r2, [r0, #100]	; 0x64
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80007aa:	f100 0148 	add.w	r1, r0, #72	; 0x48
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <_ZN7CanCtrlC1Ev+0x48>)
 80007b0:	f000 f9f1 	bl	8000b96 <HAL_CAN_ConfigFilter>
}
 80007b4:	4620      	mov	r0, r4
 80007b6:	bd10      	pop	{r4, pc}
 80007b8:	2000003c 	.word	0x2000003c

080007bc <_ZN7CanCtrl5CantxEmPh>:

uint32_t CanCtrl::GetBID(){
	return BID;
}

bool CanCtrl::Cantx(uint32_t TID/*送信用ID*/,uint8_t data[8]/*送信内容*/){
 80007bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007be:	4604      	mov	r4, r0
	TxHeader.StdId = TID;
 80007c0:	6141      	str	r1, [r0, #20]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <_ZN7CanCtrl5CantxEmPh+0x68>)
bool CanCtrl::Cantx(uint32_t TID/*送信用ID*/,uint8_t data[8]/*送信内容*/){
 80007c4:	4615      	mov	r5, r2
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80007c6:	f000 fad1 	bl	8000d6c <HAL_CAN_GetTxMailboxesFreeLevel>
 80007ca:	b338      	cbz	r0, 800081c <_ZN7CanCtrl5CantxEmPh+0x60>
		TxData[0] = data[0];
 80007cc:	782b      	ldrb	r3, [r5, #0]
		TxData[5] = data[5];
		TxData[6] = data[6];
		TxData[7] = data[7];

		uint32_t TxMailbox;//ボックス番号(ここに返ってくる)
		if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 80007ce:	1d22      	adds	r2, r4, #4
		TxData[0] = data[0];
 80007d0:	7123      	strb	r3, [r4, #4]
		TxData[1] = data[1];
 80007d2:	786b      	ldrb	r3, [r5, #1]
		if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 80007d4:	f104 0114 	add.w	r1, r4, #20
		TxData[1] = data[1];
 80007d8:	7163      	strb	r3, [r4, #5]
		TxData[2] = data[2];
 80007da:	78ab      	ldrb	r3, [r5, #2]
		if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <_ZN7CanCtrl5CantxEmPh+0x68>)
		TxData[2] = data[2];
 80007de:	71a3      	strb	r3, [r4, #6]
		TxData[3] = data[3];
 80007e0:	78eb      	ldrb	r3, [r5, #3]
 80007e2:	71e3      	strb	r3, [r4, #7]
		TxData[4] = data[4];
 80007e4:	792b      	ldrb	r3, [r5, #4]
 80007e6:	7223      	strb	r3, [r4, #8]
		TxData[5] = data[5];
 80007e8:	796b      	ldrb	r3, [r5, #5]
 80007ea:	7263      	strb	r3, [r4, #9]
		TxData[6] = data[6];
 80007ec:	79ab      	ldrb	r3, [r5, #6]
 80007ee:	72a3      	strb	r3, [r4, #10]
		TxData[7] = data[7];
 80007f0:	79eb      	ldrb	r3, [r5, #7]
 80007f2:	72e3      	strb	r3, [r4, #11]
		if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 80007f4:	ab01      	add	r3, sp, #4
 80007f6:	f000 fa6b 	bl	8000cd0 <HAL_CAN_AddTxMessage>
 80007fa:	4604      	mov	r4, r0
 80007fc:	b980      	cbnz	r0, 8000820 <_ZN7CanCtrl5CantxEmPh+0x64>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <_ZN7CanCtrl5CantxEmPh+0x6c>)
 8000804:	f000 fc6c 	bl	80010e0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080c:	f000 f936 	bl	8000a7c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <_ZN7CanCtrl5CantxEmPh+0x6c>)
 8000812:	4622      	mov	r2, r4
 8000814:	2102      	movs	r1, #2
 8000816:	f000 fc63 	bl	80010e0 <HAL_GPIO_WritePin>
			return true;
 800081a:	2001      	movs	r0, #1
		}
	}
	else{
		return false;
	}
}
 800081c:	b003      	add	sp, #12
 800081e:	bd30      	pop	{r4, r5, pc}
			return false;
 8000820:	2000      	movs	r0, #0
 8000822:	e7fb      	b.n	800081c <_ZN7CanCtrl5CantxEmPh+0x60>
 8000824:	2000003c 	.word	0x2000003c
 8000828:	40010c00 	.word	0x40010c00

0800082c <_ZN7CanCtrl5CanrxERmPh>:
	{
		return std::nullopt;
	}
}

bool CanCtrl::Canrx(uint32_t& RID,uint8_t data[8]){
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	4613      	mov	r3, r2
 8000830:	4605      	mov	r5, r0
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK){
 8000832:	f100 022c 	add.w	r2, r0, #44	; 0x2c
bool CanCtrl::Canrx(uint32_t& RID,uint8_t data[8]){
 8000836:	460e      	mov	r6, r1
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK){
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <_ZN7CanCtrl5CanrxERmPh+0x40>)
 800083a:	2100      	movs	r1, #0
 800083c:	f000 faaa 	bl	8000d94 <HAL_CAN_GetRxMessage>
 8000840:	4604      	mov	r4, r0
 8000842:	b988      	cbnz	r0, 8000868 <_ZN7CanCtrl5CanrxERmPh+0x3c>
 8000844:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		RID = RxHeader.StdId;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2102      	movs	r1, #2
		RID = RxHeader.StdId;
 800084a:	6033      	str	r3, [r6, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <_ZN7CanCtrl5CanrxERmPh+0x44>)
 800084e:	f000 fc47 	bl	80010e0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 f911 	bl	8000a7c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <_ZN7CanCtrl5CanrxERmPh+0x44>)
 800085c:	4622      	mov	r2, r4
 800085e:	2102      	movs	r1, #2
 8000860:	f000 fc3e 	bl	80010e0 <HAL_GPIO_WritePin>
 8000864:	4620      	mov	r0, r4
		return false;
	}
	else{
		return true;
	}
}
 8000866:	bd70      	pop	{r4, r5, r6, pc}
		return true;
 8000868:	2001      	movs	r0, #1
 800086a:	e7fc      	b.n	8000866 <_ZN7CanCtrl5CanrxERmPh+0x3a>
 800086c:	2000003c 	.word	0x2000003c
 8000870:	40010c00 	.word	0x40010c00

08000874 <_Z7MPU9250Phh>:

extern "C"{
    extern SPI_HandleTypeDef hspi1;
}

bool MPU9250(uint8_t Rdata[2],uint8_t reg/*レジスタの番号を書くとその情報がRdataに帰ってくる*/){
 8000874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
	tx_data[1] = 0x00;
 8000876:	2400      	movs	r4, #0

	HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_RESET);
	if (HAL_SPI_TransmitReceive(&hspi1,tx_data,rx_data,2,1) == HAL_OK){
 8000878:	2501      	movs	r5, #1
	tx_data[0] = reg | 0x80;
 800087a:	f061 017f 	orn	r1, r1, #127	; 0x7f
	HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_RESET);
 800087e:	4622      	mov	r2, r4
	tx_data[0] = reg | 0x80;
 8000880:	f88d 100c 	strb.w	r1, [sp, #12]
bool MPU9250(uint8_t Rdata[2],uint8_t reg/*レジスタの番号を書くとその情報がRdataに帰ってくる*/){
 8000884:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_RESET);
 8000886:	2101      	movs	r1, #1
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <_Z7MPU9250Phh+0x58>)
	tx_data[1] = 0x00;
 800088a:	f88d 400d 	strb.w	r4, [sp, #13]
	HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_RESET);
 800088e:	f000 fc27 	bl	80010e0 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi1,tx_data,rx_data,2,1) == HAL_OK){
 8000892:	2302      	movs	r3, #2
 8000894:	480e      	ldr	r0, [pc, #56]	; (80008d0 <_Z7MPU9250Phh+0x5c>)
 8000896:	9500      	str	r5, [sp, #0]
 8000898:	aa02      	add	r2, sp, #8
 800089a:	a903      	add	r1, sp, #12
 800089c:	f001 f866 	bl	800196c <HAL_SPI_TransmitReceive>
 80008a0:	b968      	cbnz	r0, 80008be <_Z7MPU9250Phh+0x4a>
		Rdata[0] = rx_data[0];
 80008a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
		Rdata[1] = rx_data[1];
		HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_SET);
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <_Z7MPU9250Phh+0x58>)
		Rdata[0] = rx_data[0];
 80008a8:	7033      	strb	r3, [r6, #0]
		Rdata[1] = rx_data[1];
 80008aa:	f89d 3009 	ldrb.w	r3, [sp, #9]
		HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_SET);
 80008ae:	462a      	mov	r2, r5
 80008b0:	4629      	mov	r1, r5
		Rdata[1] = rx_data[1];
 80008b2:	7073      	strb	r3, [r6, #1]
		HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_SET);
 80008b4:	f000 fc14 	bl	80010e0 <HAL_GPIO_WritePin>
		return true;
 80008b8:	4628      	mov	r0, r5
	}
	else{
		HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_SET);
		return false;
	}
}
 80008ba:	b004      	add	sp, #16
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,SPI_CS_Pin,GPIO_PIN_SET);
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <_Z7MPU9250Phh+0x58>)
 80008c0:	462a      	mov	r2, r5
 80008c2:	4629      	mov	r1, r5
 80008c4:	f000 fc0c 	bl	80010e0 <HAL_GPIO_WritePin>
		return false;
 80008c8:	4620      	mov	r0, r4
 80008ca:	e7f6      	b.n	80008ba <_Z7MPU9250Phh+0x46>
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	20000350 	.word	0x20000350

080008d4 <main_cpp>:
uint8_t srxdata[8];
uint32_t sRID;
uint8_t msg[] = "hello world!\n\r";
uint8_t rmsg[]= "0b10";

void main_cpp(){
 80008d4:	b500      	push	{lr}
 80008d6:	b0a1      	sub	sp, #132	; 0x84
	CanCtrl C;
 80008d8:	a804      	add	r0, sp, #16
 80008da:	f7ff ff49 	bl	8000770 <_ZN7CanCtrlC1Ev>
	HAL_CAN_Start(&hcan);
 80008de:	4828      	ldr	r0, [pc, #160]	; (8000980 <main_cpp+0xac>)
 80008e0:	f000 f9c8 	bl	8000c74 <HAL_CAN_Start>
	uint8_t stxdata[8];
	stxdata[0] = 0x00;
	stxdata[1] = 0x11;
 80008e4:	2311      	movs	r3, #17
 80008e6:	f88d 3009 	strb.w	r3, [sp, #9]
	stxdata[2] = 0x22;
 80008ea:	2322      	movs	r3, #34	; 0x22
 80008ec:	f88d 300a 	strb.w	r3, [sp, #10]
	stxdata[3] = 0x33;
 80008f0:	2333      	movs	r3, #51	; 0x33
 80008f2:	f88d 300b 	strb.w	r3, [sp, #11]
	stxdata[4] = 0x44;
 80008f6:	2344      	movs	r3, #68	; 0x44
 80008f8:	f88d 300c 	strb.w	r3, [sp, #12]
	stxdata[5] = 0x55;
 80008fc:	2355      	movs	r3, #85	; 0x55
 80008fe:	f88d 300d 	strb.w	r3, [sp, #13]
	stxdata[6] = 0x66;
 8000902:	2366      	movs	r3, #102	; 0x66
	stxdata[0] = 0x00;
 8000904:	2400      	movs	r4, #0
	stxdata[6] = 0x66;
 8000906:	f88d 300e 	strb.w	r3, [sp, #14]
	stxdata[7] = 0x77;
 800090a:	2377      	movs	r3, #119	; 0x77
	uint8_t spidata[2];
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 800090c:	2104      	movs	r1, #4
 800090e:	481d      	ldr	r0, [pc, #116]	; (8000984 <main_cpp+0xb0>)
	stxdata[7] = 0x77;
 8000910:	f88d 300f 	strb.w	r3, [sp, #15]
	stxdata[0] = 0x00;
 8000914:	f88d 4008 	strb.w	r4, [sp, #8]
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000918:	f001 fbf4 	bl	8002104 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800091c:	2108      	movs	r1, #8
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <main_cpp+0xb0>)
 8000920:	f001 fbf0 	bl	8002104 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000924:	4621      	mov	r1, r4
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <main_cpp+0xb4>)
 8000928:	f001 fbec 	bl	8002104 <HAL_TIM_PWM_Start>
	while(1){
		C.Cantx(0x100,stxdata);
		C.Canrx(sRID,srxdata);
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 100);//(レジスタモジュール,データ,文字数,タイムアウト(つまりその時間経過したらエラー終了))
 800092c:	4e17      	ldr	r6, [pc, #92]	; (800098c <main_cpp+0xb8>)
 800092e:	4c18      	ldr	r4, [pc, #96]	; (8000990 <main_cpp+0xbc>)
		HAL_UART_Receive(&huart2, rmsg, strlen((char*)rmsg), 100);//(レジスタモジュール,データ,文字数,タイムアウト(つまりその時間経過したらエラー終了))
 8000930:	4d18      	ldr	r5, [pc, #96]	; (8000994 <main_cpp+0xc0>)
		C.Cantx(0x100,stxdata);
 8000932:	aa02      	add	r2, sp, #8
 8000934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000938:	a804      	add	r0, sp, #16
 800093a:	f7ff ff3f 	bl	80007bc <_ZN7CanCtrl5CantxEmPh>
		C.Canrx(sRID,srxdata);
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <main_cpp+0xc4>)
 8000940:	4916      	ldr	r1, [pc, #88]	; (800099c <main_cpp+0xc8>)
 8000942:	a804      	add	r0, sp, #16
 8000944:	f7ff ff72 	bl	800082c <_ZN7CanCtrl5CanrxERmPh>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 100);//(レジスタモジュール,データ,文字数,タイムアウト(つまりその時間経過したらエラー終了))
 8000948:	4630      	mov	r0, r6
 800094a:	f7ff fbff 	bl	800014c <strlen>
 800094e:	4631      	mov	r1, r6
 8000950:	b282      	uxth	r2, r0
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	4620      	mov	r0, r4
 8000956:	f001 fcb7 	bl	80022c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, rmsg, strlen((char*)rmsg), 100);//(レジスタモジュール,データ,文字数,タイムアウト(つまりその時間経過したらエラー終了))
 800095a:	4628      	mov	r0, r5
 800095c:	f7ff fbf6 	bl	800014c <strlen>
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	b282      	uxth	r2, r0
 8000964:	4629      	mov	r1, r5
 8000966:	4620      	mov	r0, r4
 8000968:	f001 fd03 	bl	8002372 <HAL_UART_Receive>
		MPU9250(spidata,0x75);
 800096c:	2175      	movs	r1, #117	; 0x75
 800096e:	a801      	add	r0, sp, #4
 8000970:	f7ff ff80 	bl	8000874 <_Z7MPU9250Phh>
		HAL_Delay(1000);
 8000974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000978:	f000 f880 	bl	8000a7c <HAL_Delay>
	while(1){
 800097c:	e7d9      	b.n	8000932 <main_cpp+0x5e>
 800097e:	bf00      	nop
 8000980:	2000003c 	.word	0x2000003c
 8000984:	200003a8 	.word	0x200003a8
 8000988:	200003f0 	.word	0x200003f0
 800098c:	20000004 	.word	0x20000004
 8000990:	20000438 	.word	0x20000438
 8000994:	20000013 	.word	0x20000013
 8000998:	20000480 	.word	0x20000480
 800099c:	2000047c 	.word	0x2000047c

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff fed1 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f001 fd59 	bl	8002480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fc03 	bl	80001d8 <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80009dc:	08002524 	.word	0x08002524
  ldr r2, =_sbss
 80009e0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80009e4:	2000048c 	.word	0x2000048c

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_InitTick+0x3c>)
{
 80009f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f2:	7818      	ldrb	r0, [r3, #0]
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_InitTick+0x40>)
 80009fe:	6810      	ldr	r0, [r2, #0]
 8000a00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a04:	f000 fa82 	bl	8000f0c <HAL_SYSTICK_Config>
 8000a08:	4604      	mov	r4, r0
 8000a0a:	b958      	cbnz	r0, 8000a24 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0c:	2d0f      	cmp	r5, #15
 8000a0e:	d809      	bhi.n	8000a24 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	4602      	mov	r2, r0
 8000a12:	4629      	mov	r1, r5
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 fa46 	bl	8000ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_InitTick+0x44>)
 8000a20:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	e7fc      	b.n	8000a22 <HAL_InitTick+0x36>
 8000a28:	20000018 	.word	0x20000018
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	2000001c 	.word	0x2000001c

08000a34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x20>)
{
 8000a36:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	f000 fa1f 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff ffd0 	bl	80009ec <HAL_InitTick>
  HAL_MspInit();
 8000a4c:	f7ff fd22 	bl	8000494 <HAL_MspInit>
}
 8000a50:	2000      	movs	r0, #0
 8000a52:	bd08      	pop	{r3, pc}
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <HAL_IncTick+0x10>)
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_IncTick+0x14>)
 8000a5c:	6811      	ldr	r1, [r2, #0]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	440b      	add	r3, r1
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000488 	.word	0x20000488
 8000a6c:	20000018 	.word	0x20000018

08000a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <HAL_GetTick+0x8>)
 8000a72:	6818      	ldr	r0, [r3, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000488 	.word	0x20000488

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff fff6 	bl	8000a70 <HAL_GetTick>
 8000a84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a88:	bf1e      	ittt	ne
 8000a8a:	4b04      	ldrne	r3, [pc, #16]	; (8000a9c <HAL_Delay+0x20>)
 8000a8c:	781b      	ldrbne	r3, [r3, #0]
 8000a8e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	1b43      	subs	r3, r0, r5
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d3fa      	bcc.n	8000a90 <HAL_Delay+0x14>
  {
  }
}
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
 8000a9c:	20000018 	.word	0x20000018

08000aa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000aa0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d06e      	beq.n	8000b86 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000aac:	b90b      	cbnz	r3, 8000ab2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aae:	f7ff fd13 	bl	80004d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	6813      	ldr	r3, [r2, #0]
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000abc:	f7ff ffd8 	bl	8000a70 <HAL_GetTick>
 8000ac0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	07d1      	lsls	r1, r2, #31
 8000ac8:	d551      	bpl.n	8000b6e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f022 0202 	bic.w	r2, r2, #2
 8000ad0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad2:	f7ff ffcd 	bl	8000a70 <HAL_GetTick>
 8000ad6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	0792      	lsls	r2, r2, #30
 8000ade:	d454      	bmi.n	8000b8a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ae0:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ae2:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ae4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	bf0c      	ite	eq
 8000aea:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aee:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000af2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000af4:	7e62      	ldrb	r2, [r4, #25]
 8000af6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	bf0c      	ite	eq
 8000afc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b00:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000b04:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b06:	7ea2      	ldrb	r2, [r4, #26]
 8000b08:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	bf0c      	ite	eq
 8000b0e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b12:	f022 0220 	bicne.w	r2, r2, #32
 8000b16:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b18:	7ee2      	ldrb	r2, [r4, #27]
 8000b1a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	bf0c      	ite	eq
 8000b20:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b24:	f042 0210 	orrne.w	r2, r2, #16
 8000b28:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b2a:	7f22      	ldrb	r2, [r4, #28]
 8000b2c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	bf0c      	ite	eq
 8000b32:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b36:	f022 0208 	bicne.w	r2, r2, #8
 8000b3a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b3c:	7f62      	ldrb	r2, [r4, #29]
 8000b3e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	bf0c      	ite	eq
 8000b44:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b48:	f022 0204 	bicne.w	r2, r2, #4
 8000b4c:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b4e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	6961      	ldr	r1, [r4, #20]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	6861      	ldr	r1, [r4, #4]
 8000b5e:	3901      	subs	r1, #1
 8000b60:	430a      	orrs	r2, r1
 8000b62:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b64:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b66:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000b68:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000b6c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b6e:	f7ff ff7f 	bl	8000a70 <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	280a      	cmp	r0, #10
 8000b76:	d9a4      	bls.n	8000ac2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b80:	2305      	movs	r3, #5
 8000b82:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	e7f0      	b.n	8000b6c <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b8a:	f7ff ff71 	bl	8000a70 <HAL_GetTick>
 8000b8e:	1b40      	subs	r0, r0, r5
 8000b90:	280a      	cmp	r0, #10
 8000b92:	d9a1      	bls.n	8000ad8 <HAL_CAN_Init+0x38>
 8000b94:	e7f0      	b.n	8000b78 <HAL_CAN_Init+0xd8>

08000b96 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b96:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b98:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d862      	bhi.n	8000c68 <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ba2:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ba4:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ba6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bb2:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bb4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bb8:	f002 001f 	and.w	r0, r2, #31
 8000bbc:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc0:	ea25 0500 	bic.w	r5, r5, r0
 8000bc4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bc8:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bca:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bcc:	bb85      	cbnz	r5, 8000c30 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bce:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bd2:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bd4:	4025      	ands	r5, r4
 8000bd6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bda:	888d      	ldrh	r5, [r1, #4]
 8000bdc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000be0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be4:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000be8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bea:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bec:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bf0:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000bf4:	698a      	ldr	r2, [r1, #24]
 8000bf6:	bb6a      	cbnz	r2, 8000c54 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bfc:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c02:	690a      	ldr	r2, [r1, #16]
 8000c04:	bb52      	cbnz	r2, 8000c5c <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c0a:	4014      	ands	r4, r2
 8000c0c:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c10:	6a0a      	ldr	r2, [r1, #32]
 8000c12:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c14:	bf02      	ittt	eq
 8000c16:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000c1a:	4310      	orreq	r0, r2
 8000c1c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000c20:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c30:	2d01      	cmp	r5, #1
 8000c32:	d1df      	bne.n	8000bf4 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c34:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c38:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c3a:	4305      	orrs	r5, r0
 8000c3c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c40:	888d      	ldrh	r5, [r1, #4]
 8000c42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c46:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c4a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c50:	898d      	ldrh	r5, [r1, #12]
 8000c52:	e7cb      	b.n	8000bec <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	e7d0      	b.n	8000bfe <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c60:	4302      	orrs	r2, r0
 8000c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c66:	e7d3      	b.n	8000c10 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000c70:	2001      	movs	r0, #1
 8000c72:	e7dc      	b.n	8000c2e <HAL_CAN_ConfigFilter+0x98>

08000c74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c76:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000c7a:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	b2dd      	uxtb	r5, r3
 8000c80:	d120      	bne.n	8000cc4 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c82:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c84:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c86:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c92:	f7ff feed 	bl	8000a70 <HAL_GetTick>
 8000c96:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f013 0301 	ands.w	r3, r3, #1
 8000ca0:	d102      	bne.n	8000ca8 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 8000ca2:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca4:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8000ca6:	e00b      	b.n	8000cc0 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff fee2 	bl	8000a70 <HAL_GetTick>
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	280a      	cmp	r0, #10
 8000cb0:	d9f2      	bls.n	8000c98 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000cc6:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ccc:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000cce:	e7f7      	b.n	8000cc0 <HAL_CAN_Start+0x4c>

08000cd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd2:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cd6:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd8:	3d01      	subs	r5, #1
 8000cda:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cdc:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000cde:	d841      	bhi.n	8000d64 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ce0:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000ce4:	d03a      	beq.n	8000d5c <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ce6:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000cea:	2c03      	cmp	r4, #3
 8000cec:	f04f 0501 	mov.w	r5, #1
 8000cf0:	d105      	bne.n	8000cfe <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000cf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cf8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e028      	b.n	8000d50 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cfe:	40a5      	lsls	r5, r4
 8000d00:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000d02:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000d06:	f104 0318 	add.w	r3, r4, #24
 8000d0a:	bb10      	cbnz	r0, 8000d52 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d0c:	6808      	ldr	r0, [r1, #0]
 8000d0e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d16:	0120      	lsls	r0, r4, #4
 8000d18:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d1c:	4406      	add	r6, r0
      return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d20:	690d      	ldr	r5, [r1, #16]
 8000d22:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d26:	7d09      	ldrb	r1, [r1, #20]
 8000d28:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d2a:	bf02      	ittt	eq
 8000d2c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000d30:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000d34:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d38:	6851      	ldr	r1, [r2, #4]
 8000d3a:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d44:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000d48:	f042 0201 	orr.w	r2, r2, #1
 8000d4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d52:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000d54:	4338      	orrs	r0, r7
 8000d56:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000d5a:	e7da      	b.n	8000d12 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	e7c9      	b.n	8000cf8 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	e7c5      	b.n	8000cf8 <HAL_CAN_AddTxMessage+0x28>

08000d6c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d6c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d70:	3b01      	subs	r3, #1
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d80c      	bhi.n	8000d90 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d76:	6803      	ldr	r3, [r0, #0]
 8000d78:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d7a:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000d7c:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d7e:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d80:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8000d84:	bf48      	it	mi
 8000d86:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	d502      	bpl.n	8000d92 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 8000d8c:	3001      	adds	r0, #1
 8000d8e:	4770      	bx	lr
  uint32_t freelevel = 0U;
 8000d90:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8000d92:	4770      	bx	lr

08000d94 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d96:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d9a:	3c01      	subs	r4, #1
 8000d9c:	2c01      	cmp	r4, #1
 8000d9e:	d86c      	bhi.n	8000e7a <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000da0:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000da2:	b941      	cbnz	r1, 8000db6 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000da4:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000da6:	07a4      	lsls	r4, r4, #30
 8000da8:	d107      	bne.n	8000dba <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000daa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000db0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e056      	b.n	8000e64 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000db6:	6934      	ldr	r4, [r6, #16]
 8000db8:	e7f5      	b.n	8000da6 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000dba:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000dbe:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000dc2:	010c      	lsls	r4, r1, #4
 8000dc4:	f007 0704 	and.w	r7, r7, #4
 8000dc8:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d14b      	bne.n	8000e66 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000dce:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000dd2:	0d7f      	lsrs	r7, r7, #21
 8000dd4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dd6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dda:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ddc:	f007 0702 	and.w	r7, r7, #2
 8000de0:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000de2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000de6:	f007 070f 	and.w	r7, r7, #15
 8000dea:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dec:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000df0:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000df4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000df8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dfa:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dfc:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dfe:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000e02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e04:	6802      	ldr	r2, [r0, #0]
 8000e06:	4422      	add	r2, r4
 8000e08:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e0c:	0a12      	lsrs	r2, r2, #8
 8000e0e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e10:	6802      	ldr	r2, [r0, #0]
 8000e12:	4422      	add	r2, r4
 8000e14:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e18:	0c12      	lsrs	r2, r2, #16
 8000e1a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e1c:	6802      	ldr	r2, [r0, #0]
 8000e1e:	4422      	add	r2, r4
 8000e20:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e24:	0e12      	lsrs	r2, r2, #24
 8000e26:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e28:	6802      	ldr	r2, [r0, #0]
 8000e2a:	4422      	add	r2, r4
 8000e2c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e30:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e32:	6802      	ldr	r2, [r0, #0]
 8000e34:	4422      	add	r2, r4
 8000e36:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e3a:	0a12      	lsrs	r2, r2, #8
 8000e3c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e3e:	6802      	ldr	r2, [r0, #0]
 8000e40:	4422      	add	r2, r4
 8000e42:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e4a:	6802      	ldr	r2, [r0, #0]
 8000e4c:	4422      	add	r2, r4
 8000e4e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e56:	6803      	ldr	r3, [r0, #0]
 8000e58:	b951      	cbnz	r1, 8000e70 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000e62:	2000      	movs	r0, #0
  }
}
 8000e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e66:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000e6a:	08ff      	lsrs	r7, r7, #3
 8000e6c:	6057      	str	r7, [r2, #4]
 8000e6e:	e7b2      	b.n	8000dd6 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	e7f3      	b.n	8000e62 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	e796      	b.n	8000db0 <HAL_CAN_GetRxMessage+0x1c>
	...

08000e84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e86:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e92:	0412      	lsls	r2, r2, #16
 8000e94:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ea0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b530      	push	{r4, r5, lr}
 8000eac:	68dc      	ldr	r4, [r3, #12]
 8000eae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	bf28      	it	cs
 8000ebc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec4:	bf98      	it	ls
 8000ec6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ecc:	bf88      	it	hi
 8000ece:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	ea21 0303 	bic.w	r3, r1, r3
 8000ed4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed6:	fa05 f404 	lsl.w	r4, r5, r4
 8000eda:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ede:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	bfac      	ite	ge
 8000ee6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	4a07      	ldrlt	r2, [pc, #28]	; (8000f08 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	bfab      	itete	ge
 8000ef4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f02:	bd30      	pop	{r4, r5, pc}
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	e000ed14 	.word	0xe000ed14

08000f0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f12:	d20b      	bcs.n	8000f2c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	21f0      	movs	r1, #240	; 0xf0
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f22:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f24:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f26:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f28:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f2c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f38:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000f3a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4f61      	ldr	r7, [pc, #388]	; (80010c4 <HAL_GPIO_Init+0x190>)
 8000f3e:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8000f40:	f8df c188 	ldr.w	ip, [pc, #392]	; 80010cc <HAL_GPIO_Init+0x198>
 8000f44:	f8df e188 	ldr.w	lr, [pc, #392]	; 80010d0 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f48:	680d      	ldr	r5, [r1, #0]
 8000f4a:	fa35 f406 	lsrs.w	r4, r5, r6
 8000f4e:	d102      	bne.n	8000f56 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000f50:	b003      	add	sp, #12
 8000f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f56:	f04f 0801 	mov.w	r8, #1
 8000f5a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000f62:	ea38 0505 	bics.w	r5, r8, r5
 8000f66:	d177      	bne.n	8001058 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f68:	684d      	ldr	r5, [r1, #4]
 8000f6a:	2d03      	cmp	r5, #3
 8000f6c:	d807      	bhi.n	8000f7e <HAL_GPIO_Init+0x4a>
 8000f6e:	3d01      	subs	r5, #1
 8000f70:	2d02      	cmp	r5, #2
 8000f72:	f200 8082 	bhi.w	800107a <HAL_GPIO_Init+0x146>
 8000f76:	e8df f005 	tbb	[pc, r5]
 8000f7a:	9792      	.short	0x9792
 8000f7c:	9d          	.byte	0x9d
 8000f7d:	00          	.byte	0x00
 8000f7e:	2d12      	cmp	r5, #18
 8000f80:	f000 8095 	beq.w	80010ae <HAL_GPIO_Init+0x17a>
 8000f84:	d86a      	bhi.n	800105c <HAL_GPIO_Init+0x128>
 8000f86:	2d11      	cmp	r5, #17
 8000f88:	f000 808b 	beq.w	80010a2 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f8c:	2cff      	cmp	r4, #255	; 0xff
 8000f8e:	bf98      	it	ls
 8000f90:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f92:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f96:	bf88      	it	hi
 8000f98:	f100 0a04 	addhi.w	sl, r0, #4
 8000f9c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa4:	bf88      	it	hi
 8000fa6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa8:	fa09 fb05 	lsl.w	fp, r9, r5
 8000fac:	ea28 080b 	bic.w	r8, r8, fp
 8000fb0:	fa02 f505 	lsl.w	r5, r2, r5
 8000fb4:	ea48 0505 	orr.w	r5, r8, r5
 8000fb8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fc0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fc4:	d048      	beq.n	8001058 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	69bd      	ldr	r5, [r7, #24]
 8000fc8:	f026 0803 	bic.w	r8, r6, #3
 8000fcc:	f045 0501 	orr.w	r5, r5, #1
 8000fd0:	61bd      	str	r5, [r7, #24]
 8000fd2:	69bd      	ldr	r5, [r7, #24]
 8000fd4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fd8:	f005 0501 	and.w	r5, r5, #1
 8000fdc:	9501      	str	r5, [sp, #4]
 8000fde:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000fec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ff4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff8:	4d36      	ldr	r5, [pc, #216]	; (80010d4 <HAL_GPIO_Init+0x1a0>)
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d05e      	beq.n	80010bc <HAL_GPIO_Init+0x188>
 8000ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001002:	42a8      	cmp	r0, r5
 8001004:	d05c      	beq.n	80010c0 <HAL_GPIO_Init+0x18c>
 8001006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100a:	42a8      	cmp	r0, r5
 800100c:	bf0c      	ite	eq
 800100e:	2502      	moveq	r5, #2
 8001010:	2503      	movne	r5, #3
 8001012:	fa05 f50b 	lsl.w	r5, r5, fp
 8001016:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800101a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800101e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001020:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001024:	bf14      	ite	ne
 8001026:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001028:	43a5      	biceq	r5, r4
 800102a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800102c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001032:	bf14      	ite	ne
 8001034:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001036:	43a5      	biceq	r5, r4
 8001038:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800103a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001040:	bf14      	ite	ne
 8001042:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001044:	43a5      	biceq	r5, r4
 8001046:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001048:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800104e:	bf14      	ite	ne
 8001050:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001052:	ea25 0404 	biceq.w	r4, r5, r4
 8001056:	60dc      	str	r4, [r3, #12]
	position++;
 8001058:	3601      	adds	r6, #1
 800105a:	e775      	b.n	8000f48 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800105c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80010d8 <HAL_GPIO_Init+0x1a4>
 8001060:	454d      	cmp	r5, r9
 8001062:	d00a      	beq.n	800107a <HAL_GPIO_Init+0x146>
 8001064:	d815      	bhi.n	8001092 <HAL_GPIO_Init+0x15e>
 8001066:	4575      	cmp	r5, lr
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x146>
 800106a:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800106e:	454d      	cmp	r5, r9
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x146>
 8001072:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001076:	454d      	cmp	r5, r9
 8001078:	d188      	bne.n	8000f8c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107a:	688a      	ldr	r2, [r1, #8]
 800107c:	b1e2      	cbz	r2, 80010b8 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800107e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001080:	bf08      	it	eq
 8001082:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001086:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800108a:	bf18      	it	ne
 800108c:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001090:	e77c      	b.n	8000f8c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001092:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80010dc <HAL_GPIO_Init+0x1a8>
 8001096:	454d      	cmp	r5, r9
 8001098:	d0ef      	beq.n	800107a <HAL_GPIO_Init+0x146>
 800109a:	4565      	cmp	r5, ip
 800109c:	e7ec      	b.n	8001078 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800109e:	68ca      	ldr	r2, [r1, #12]
          break;
 80010a0:	e774      	b.n	8000f8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010a2:	68ca      	ldr	r2, [r1, #12]
 80010a4:	3204      	adds	r2, #4
          break;
 80010a6:	e771      	b.n	8000f8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a8:	68ca      	ldr	r2, [r1, #12]
 80010aa:	3208      	adds	r2, #8
          break;
 80010ac:	e76e      	b.n	8000f8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ae:	68ca      	ldr	r2, [r1, #12]
 80010b0:	320c      	adds	r2, #12
          break;
 80010b2:	e76b      	b.n	8000f8c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80010b4:	2200      	movs	r2, #0
 80010b6:	e769      	b.n	8000f8c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b8:	2204      	movs	r2, #4
 80010ba:	e767      	b.n	8000f8c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010bc:	2500      	movs	r5, #0
 80010be:	e7a8      	b.n	8001012 <HAL_GPIO_Init+0xde>
 80010c0:	2501      	movs	r5, #1
 80010c2:	e7a6      	b.n	8001012 <HAL_GPIO_Init+0xde>
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010400 	.word	0x40010400
 80010cc:	10320000 	.word	0x10320000
 80010d0:	10120000 	.word	0x10120000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	10220000 	.word	0x10220000
 80010dc:	10310000 	.word	0x10310000

080010e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e0:	b10a      	cbz	r2, 80010e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	6101      	str	r1, [r0, #16]
  }
}
 80010e4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	e7fb      	b.n	80010e2 <HAL_GPIO_WritePin+0x2>

080010ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ec:	4604      	mov	r4, r0
{
 80010ee:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80010f0:	b310      	cbz	r0, 8001138 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80010f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010fa:	b91b      	cbnz	r3, 8001104 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010fc:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001100:	f7ff fb16 	bl	8000730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001106:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001108:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800110a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800110e:	f855 0b10 	ldr.w	r0, [r5], #16
 8001112:	f001 f993 	bl	800243c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	1d27      	adds	r7, r4, #4
 800111e:	6033      	str	r3, [r6, #0]
 8001120:	4626      	mov	r6, r4
 8001122:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001126:	f856 0b10 	ldr.w	r0, [r6], #16
 800112a:	f001 f980 	bl	800242e <USB_CoreInit>
 800112e:	4605      	mov	r5, r0
 8001130:	b120      	cbz	r0, 800113c <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001132:	2302      	movs	r3, #2
 8001134:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001138:	2501      	movs	r5, #1
 800113a:	e04c      	b.n	80011d6 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800113c:	4601      	mov	r1, r0
 800113e:	6820      	ldr	r0, [r4, #0]
 8001140:	f001 f986 	bl	8002450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001146:	f04f 0e01 	mov.w	lr, #1
 800114a:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800114c:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	4594      	cmp	ip, r2
 8001156:	f101 0101 	add.w	r1, r1, #1
 800115a:	d81b      	bhi.n	8001194 <HAL_PCD_Init+0xaa>
 800115c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800115e:	2528      	movs	r5, #40	; 0x28
 8001160:	4619      	mov	r1, r3
 8001162:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001164:	4584      	cmp	ip, r0
 8001166:	f103 0301 	add.w	r3, r3, #1
 800116a:	d820      	bhi.n	80011ae <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800116c:	46ec      	mov	ip, sp
 800116e:	4635      	mov	r5, r6
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	f8cc 3000 	str.w	r3, [ip]
 800117c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001180:	6820      	ldr	r0, [r4, #0]
 8001182:	f001 f967 	bl	8002454 <USB_DevInit>
 8001186:	2301      	movs	r3, #1
 8001188:	4605      	mov	r5, r0
 800118a:	b1e8      	cbz	r0, 80011c8 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118c:	2202      	movs	r2, #2
 800118e:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001192:	e7d1      	b.n	8001138 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001194:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001198:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800119c:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80011a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a4:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a6:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80011aa:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ac:	e7d1      	b.n	8001152 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80011ae:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b2:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80011b6:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80011ba:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011be:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	e7cc      	b.n	8001162 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80011c8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80011cc:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80011ce:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d2:	f001 f953 	bl	800247c <USB_DevDisconnect>

  return HAL_OK;
}
 80011d6:	4628      	mov	r0, r5
 80011d8:	b007      	add	sp, #28
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e0:	4605      	mov	r5, r0
 80011e2:	b338      	cbz	r0, 8001234 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e4:	6803      	ldr	r3, [r0, #0]
 80011e6:	07db      	lsls	r3, r3, #31
 80011e8:	d410      	bmi.n	800120c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	079f      	lsls	r7, r3, #30
 80011ee:	d45e      	bmi.n	80012ae <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	0719      	lsls	r1, r3, #28
 80011f4:	f100 8095 	bmi.w	8001322 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	075a      	lsls	r2, r3, #29
 80011fc:	f100 80c1 	bmi.w	8001382 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001200:	69e8      	ldr	r0, [r5, #28]
 8001202:	2800      	cmp	r0, #0
 8001204:	f040 812c 	bne.w	8001460 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001208:	2000      	movs	r0, #0
 800120a:	e029      	b.n	8001260 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4c90      	ldr	r4, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d007      	beq.n	8001228 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d10a      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	03de      	lsls	r6, r3, #15
 8001226:	d507      	bpl.n	8001238 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	039c      	lsls	r4, r3, #14
 800122c:	d5dd      	bpl.n	80011ea <HAL_RCC_OscConfig+0xe>
 800122e:	686b      	ldr	r3, [r5, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1da      	bne.n	80011ea <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001234:	2001      	movs	r0, #1
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123e:	d112      	bne.n	8001266 <HAL_RCC_OscConfig+0x8a>
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001248:	f7ff fc12 	bl	8000a70 <HAL_GetTick>
 800124c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	0398      	lsls	r0, r3, #14
 8001252:	d4ca      	bmi.n	80011ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc0c 	bl	8000a70 <HAL_GetTick>
 8001258:	1b80      	subs	r0, r0, r6
 800125a:	2864      	cmp	r0, #100	; 0x64
 800125c:	d9f7      	bls.n	800124e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
}
 8001260:	b002      	add	sp, #8
 8001262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	b99b      	cbnz	r3, 8001290 <HAL_RCC_OscConfig+0xb4>
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff fbfa 	bl	8000a70 <HAL_GetTick>
 800127c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	0399      	lsls	r1, r3, #14
 8001282:	d5b2      	bpl.n	80011ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fbf4 	bl	8000a70 <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	2864      	cmp	r0, #100	; 0x64
 800128c:	d9f7      	bls.n	800127e <HAL_RCC_OscConfig+0xa2>
 800128e:	e7e6      	b.n	800125e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	d103      	bne.n	80012a0 <HAL_RCC_OscConfig+0xc4>
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	e7cf      	b.n	8001240 <HAL_RCC_OscConfig+0x64>
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ac:	e7cb      	b.n	8001246 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4c68      	ldr	r4, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	f013 0f0c 	tst.w	r3, #12
 80012b6:	d007      	beq.n	80012c8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b8:	6863      	ldr	r3, [r4, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d110      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	03da      	lsls	r2, r3, #15
 80012c6:	d40d      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	079b      	lsls	r3, r3, #30
 80012cc:	d502      	bpl.n	80012d4 <HAL_RCC_OscConfig+0xf8>
 80012ce:	692b      	ldr	r3, [r5, #16]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1af      	bne.n	8001234 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	696a      	ldr	r2, [r5, #20]
 80012d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	e785      	b.n	80011f0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e4:	692a      	ldr	r2, [r5, #16]
 80012e6:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <HAL_RCC_OscConfig+0x278>)
 80012e8:	b16a      	cbz	r2, 8001306 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ee:	f7ff fbbf 	bl	8000a70 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	079f      	lsls	r7, r3, #30
 80012f8:	d4ec      	bmi.n	80012d4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fbb9 	bl	8000a70 <HAL_GetTick>
 80012fe:	1b80      	subs	r0, r0, r6
 8001300:	2802      	cmp	r0, #2
 8001302:	d9f7      	bls.n	80012f4 <HAL_RCC_OscConfig+0x118>
 8001304:	e7ab      	b.n	800125e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001306:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001308:	f7ff fbb2 	bl	8000a70 <HAL_GetTick>
 800130c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	0798      	lsls	r0, r3, #30
 8001312:	f57f af6d 	bpl.w	80011f0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fbab 	bl	8000a70 <HAL_GetTick>
 800131a:	1b80      	subs	r0, r0, r6
 800131c:	2802      	cmp	r0, #2
 800131e:	d9f6      	bls.n	800130e <HAL_RCC_OscConfig+0x132>
 8001320:	e79d      	b.n	800125e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001322:	69aa      	ldr	r2, [r5, #24]
 8001324:	4e4a      	ldr	r6, [pc, #296]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_RCC_OscConfig+0x278>)
 8001328:	b1e2      	cbz	r2, 8001364 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800132a:	2201      	movs	r2, #1
 800132c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001330:	f7ff fb9e 	bl	8000a70 <HAL_GetTick>
 8001334:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001338:	079b      	lsls	r3, r3, #30
 800133a:	d50d      	bpl.n	8001358 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800133c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_RCC_OscConfig+0x27c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fbb3 f3f2 	udiv	r3, r3, r2
 8001348:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800134a:	bf00      	nop
  }
  while (Delay --);
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_RCC_OscConfig+0x16e>
 8001356:	e74f      	b.n	80011f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fb8a 	bl	8000a70 <HAL_GetTick>
 800135c:	1b00      	subs	r0, r0, r4
 800135e:	2802      	cmp	r0, #2
 8001360:	d9e9      	bls.n	8001336 <HAL_RCC_OscConfig+0x15a>
 8001362:	e77c      	b.n	800125e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001364:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001368:	f7ff fb82 	bl	8000a70 <HAL_GetTick>
 800136c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001370:	079f      	lsls	r7, r3, #30
 8001372:	f57f af41 	bpl.w	80011f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fb7b 	bl	8000a70 <HAL_GetTick>
 800137a:	1b00      	subs	r0, r0, r4
 800137c:	2802      	cmp	r0, #2
 800137e:	d9f6      	bls.n	800136e <HAL_RCC_OscConfig+0x192>
 8001380:	e76d      	b.n	800125e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4c33      	ldr	r4, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 8001384:	69e3      	ldr	r3, [r4, #28]
 8001386:	00d8      	lsls	r0, r3, #3
 8001388:	d424      	bmi.n	80013d4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800138a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	69e3      	ldr	r3, [r4, #28]
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	61e3      	str	r3, [r4, #28]
 8001394:	69e3      	ldr	r3, [r4, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	4e2f      	ldr	r6, [pc, #188]	; (800145c <HAL_RCC_OscConfig+0x280>)
 80013a0:	6833      	ldr	r3, [r6, #0]
 80013a2:	05d9      	lsls	r1, r3, #23
 80013a4:	d518      	bpl.n	80013d8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a6:	68eb      	ldr	r3, [r5, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d126      	bne.n	80013fa <HAL_RCC_OscConfig+0x21e>
 80013ac:	6a23      	ldr	r3, [r4, #32]
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb5c 	bl	8000a70 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013be:	6a23      	ldr	r3, [r4, #32]
 80013c0:	079b      	lsls	r3, r3, #30
 80013c2:	d53f      	bpl.n	8001444 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	f43f af1b 	beq.w	8001200 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	69e3      	ldr	r3, [r4, #28]
 80013cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61e3      	str	r3, [r4, #28]
 80013d2:	e715      	b.n	8001200 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80013d4:	2700      	movs	r7, #0
 80013d6:	e7e2      	b.n	800139e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb46 	bl	8000a70 <HAL_GetTick>
 80013e4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	6833      	ldr	r3, [r6, #0]
 80013e8:	05da      	lsls	r2, r3, #23
 80013ea:	d4dc      	bmi.n	80013a6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff fb40 	bl	8000a70 <HAL_GetTick>
 80013f0:	eba0 0008 	sub.w	r0, r0, r8
 80013f4:	2864      	cmp	r0, #100	; 0x64
 80013f6:	d9f6      	bls.n	80013e6 <HAL_RCC_OscConfig+0x20a>
 80013f8:	e731      	b.n	800125e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	b9ab      	cbnz	r3, 8001428 <HAL_RCC_OscConfig+0x24c>
 80013fc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6223      	str	r3, [r4, #32]
 8001408:	6a23      	ldr	r3, [r4, #32]
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001410:	f7ff fb2e 	bl	8000a70 <HAL_GetTick>
 8001414:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	6a23      	ldr	r3, [r4, #32]
 8001418:	0798      	lsls	r0, r3, #30
 800141a:	d5d3      	bpl.n	80013c4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fb28 	bl	8000a70 <HAL_GetTick>
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	4540      	cmp	r0, r8
 8001424:	d9f7      	bls.n	8001416 <HAL_RCC_OscConfig+0x23a>
 8001426:	e71a      	b.n	800125e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	2b05      	cmp	r3, #5
 800142a:	6a23      	ldr	r3, [r4, #32]
 800142c:	d103      	bne.n	8001436 <HAL_RCC_OscConfig+0x25a>
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6223      	str	r3, [r4, #32]
 8001434:	e7ba      	b.n	80013ac <HAL_RCC_OscConfig+0x1d0>
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6223      	str	r3, [r4, #32]
 800143c:	6a23      	ldr	r3, [r4, #32]
 800143e:	f023 0304 	bic.w	r3, r3, #4
 8001442:	e7b6      	b.n	80013b2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fb14 	bl	8000a70 <HAL_GetTick>
 8001448:	1b80      	subs	r0, r0, r6
 800144a:	4540      	cmp	r0, r8
 800144c:	d9b7      	bls.n	80013be <HAL_RCC_OscConfig+0x1e2>
 800144e:	e706      	b.n	800125e <HAL_RCC_OscConfig+0x82>
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000
 8001458:	20000000 	.word	0x20000000
 800145c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001460:	4c2a      	ldr	r4, [pc, #168]	; (800150c <HAL_RCC_OscConfig+0x330>)
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d03e      	beq.n	80014ea <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	2200      	movs	r2, #0
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_OscConfig+0x334>)
 8001470:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001472:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	d12c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001476:	f7ff fafb 	bl	8000a70 <HAL_GetTick>
 800147a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	0199      	lsls	r1, r3, #6
 8001480:	d420      	bmi.n	80014c4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001482:	6a2b      	ldr	r3, [r5, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d105      	bne.n	8001496 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	6862      	ldr	r2, [r4, #4]
 800148c:	68a9      	ldr	r1, [r5, #8]
 800148e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001492:	430a      	orrs	r2, r1
 8001494:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001496:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001498:	6862      	ldr	r2, [r4, #4]
 800149a:	430b      	orrs	r3, r1
 800149c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80014a0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80014a2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_RCC_OscConfig+0x334>)
 80014a8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80014aa:	f7ff fae1 	bl	8000a70 <HAL_GetTick>
 80014ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	019a      	lsls	r2, r3, #6
 80014b4:	f53f aea8 	bmi.w	8001208 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fada 	bl	8000a70 <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9f6      	bls.n	80014b0 <HAL_RCC_OscConfig+0x2d4>
 80014c2:	e6cc      	b.n	800125e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fad4 	bl	8000a70 <HAL_GetTick>
 80014c8:	1b80      	subs	r0, r0, r6
 80014ca:	2802      	cmp	r0, #2
 80014cc:	d9d6      	bls.n	800147c <HAL_RCC_OscConfig+0x2a0>
 80014ce:	e6c6      	b.n	800125e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80014d0:	f7ff face 	bl	8000a70 <HAL_GetTick>
 80014d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	f57f ae95 	bpl.w	8001208 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fac7 	bl	8000a70 <HAL_GetTick>
 80014e2:	1b40      	subs	r0, r0, r5
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9f6      	bls.n	80014d6 <HAL_RCC_OscConfig+0x2fa>
 80014e8:	e6b9      	b.n	800125e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ea:	2801      	cmp	r0, #1
 80014ec:	f43f aeb8 	beq.w	8001260 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80014f0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	6a2a      	ldr	r2, [r5, #32]
 80014f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80014f8:	4291      	cmp	r1, r2
 80014fa:	f47f ae9b 	bne.w	8001234 <HAL_RCC_OscConfig+0x58>
 80014fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001500:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	4293      	cmp	r3, r2
 8001506:	f43f ae7f 	beq.w	8001208 <HAL_RCC_OscConfig+0x2c>
 800150a:	e693      	b.n	8001234 <HAL_RCC_OscConfig+0x58>
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000

08001514 <HAL_RCC_GetSysClockFreq>:
{
 8001514:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001518:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800151a:	ac02      	add	r4, sp, #8
 800151c:	f103 0510 	add.w	r5, r3, #16
 8001520:	4622      	mov	r2, r4
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	3308      	adds	r3, #8
 8001528:	c203      	stmia	r2!, {r0, r1}
 800152a:	42ab      	cmp	r3, r5
 800152c:	4614      	mov	r4, r2
 800152e:	d1f7      	bne.n	8001520 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001530:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001534:	4911      	ldr	r1, [pc, #68]	; (800157c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001536:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800153a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800153c:	f003 020c 	and.w	r2, r3, #12
 8001540:	2a08      	cmp	r2, #8
 8001542:	d117      	bne.n	8001574 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001544:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001548:	3218      	adds	r2, #24
 800154a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800154c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001552:	d50c      	bpl.n	800156e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001554:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001558:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800155e:	3318      	adds	r3, #24
 8001560:	446b      	add	r3, sp
 8001562:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001566:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800156a:	b007      	add	sp, #28
 800156c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetSysClockFreq+0x70>)
 8001570:	4358      	muls	r0, r3
 8001572:	e7fa      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001576:	e7f8      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x56>
 8001578:	08002508 	.word	0x08002508
 800157c:	40021000 	.word	0x40021000
 8001580:	007a1200 	.word	0x007a1200
 8001584:	003d0900 	.word	0x003d0900

08001588 <HAL_RCC_ClockConfig>:
{
 8001588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800158c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800158e:	4604      	mov	r4, r0
 8001590:	b910      	cbnz	r0, 8001598 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
}
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4a44      	ldr	r2, [pc, #272]	; (80016ac <HAL_RCC_ClockConfig+0x124>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d328      	bcc.n	80015f6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	6821      	ldr	r1, [r4, #0]
 80015a6:	078e      	lsls	r6, r1, #30
 80015a8:	d430      	bmi.n	800160c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	07ca      	lsls	r2, r1, #31
 80015ac:	d443      	bmi.n	8001636 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <HAL_RCC_ClockConfig+0x124>)
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	42ab      	cmp	r3, r5
 80015b8:	d865      	bhi.n	8001686 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	4d3c      	ldr	r5, [pc, #240]	; (80016b0 <HAL_RCC_ClockConfig+0x128>)
 80015be:	f012 0f04 	tst.w	r2, #4
 80015c2:	d16c      	bne.n	800169e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	0713      	lsls	r3, r2, #28
 80015c6:	d506      	bpl.n	80015d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c8:	686b      	ldr	r3, [r5, #4]
 80015ca:	6922      	ldr	r2, [r4, #16]
 80015cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015d4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d6:	f7ff ff9d 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80015da:	686b      	ldr	r3, [r5, #4]
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_RCC_ClockConfig+0x12c>)
 80015de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	40d8      	lsrs	r0, r3
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x130>)
 80015e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_ClockConfig+0x134>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	f7ff f9fd 	bl	80009ec <HAL_InitTick>
  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
 80015f4:	e7ce      	b.n	8001594 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f023 0307 	bic.w	r3, r3, #7
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	428b      	cmp	r3, r1
 8001608:	d1c3      	bne.n	8001592 <HAL_RCC_ClockConfig+0xa>
 800160a:	e7cb      	b.n	80015a4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_ClockConfig+0x128>)
 800160e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001612:	bf1e      	ittt	ne
 8001614:	685a      	ldrne	r2, [r3, #4]
 8001616:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800161a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161e:	bf42      	ittt	mi
 8001620:	685a      	ldrmi	r2, [r3, #4]
 8001622:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001626:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	68a0      	ldr	r0, [r4, #8]
 800162c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001630:	4302      	orrs	r2, r0
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	e7b9      	b.n	80015aa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	6862      	ldr	r2, [r4, #4]
 8001638:	4e1d      	ldr	r6, [pc, #116]	; (80016b0 <HAL_RCC_ClockConfig+0x128>)
 800163a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	d11a      	bne.n	8001676 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001640:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	d0a5      	beq.n	8001592 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164c:	f023 0303 	bic.w	r3, r3, #3
 8001650:	4313      	orrs	r3, r2
 8001652:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001654:	f7ff fa0c 	bl	8000a70 <HAL_GetTick>
 8001658:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	6873      	ldr	r3, [r6, #4]
 800165c:	6862      	ldr	r2, [r4, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001666:	d0a2      	beq.n	80015ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fa02 	bl	8000a70 <HAL_GetTick>
 800166c:	1bc0      	subs	r0, r0, r7
 800166e:	4540      	cmp	r0, r8
 8001670:	d9f3      	bls.n	800165a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001672:	2003      	movs	r0, #3
 8001674:	e78e      	b.n	8001594 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001676:	2a02      	cmp	r2, #2
 8001678:	d102      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800167e:	e7e1      	b.n	8001644 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	f013 0f02 	tst.w	r3, #2
 8001684:	e7de      	b.n	8001644 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	f023 0307 	bic.w	r3, r3, #7
 800168c:	432b      	orrs	r3, r5
 800168e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	42ab      	cmp	r3, r5
 8001698:	f47f af7b 	bne.w	8001592 <HAL_RCC_ClockConfig+0xa>
 800169c:	e78d      	b.n	80015ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169e:	686b      	ldr	r3, [r5, #4]
 80016a0:	68e1      	ldr	r1, [r4, #12]
 80016a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016a6:	430b      	orrs	r3, r1
 80016a8:	606b      	str	r3, [r5, #4]
 80016aa:	e78b      	b.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	080024f0 	.word	0x080024f0
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000001c 	.word	0x2000001c

080016c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016ce:	6810      	ldr	r0, [r2, #0]
}
 80016d0:	40d8      	lsrs	r0, r3
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	08002500 	.word	0x08002500
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016ee:	6810      	ldr	r0, [r2, #0]
}
 80016f0:	40d8      	lsrs	r0, r3
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	08002500 	.word	0x08002500
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001700:	6803      	ldr	r3, [r0, #0]
{
 8001702:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001706:	07d9      	lsls	r1, r3, #31
{
 8001708:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800170a:	d520      	bpl.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4c36      	ldr	r4, [pc, #216]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800170e:	69e3      	ldr	r3, [r4, #28]
 8001710:	00da      	lsls	r2, r3, #3
 8001712:	d432      	bmi.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001714:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	69e3      	ldr	r3, [r4, #28]
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61e3      	str	r3, [r4, #28]
 800171e:	69e3      	ldr	r3, [r4, #28]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4f30      	ldr	r7, [pc, #192]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	d526      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001730:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001732:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001736:	d136      	bne.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001738:	6a23      	ldr	r3, [r4, #32]
 800173a:	686a      	ldr	r2, [r5, #4]
 800173c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001740:	4313      	orrs	r3, r2
 8001742:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001744:	b11e      	cbz	r6, 800174e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001746:	69e3      	ldr	r3, [r4, #28]
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800174e:	6828      	ldr	r0, [r5, #0]
 8001750:	0783      	lsls	r3, r0, #30
 8001752:	d506      	bpl.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001754:	4924      	ldr	r1, [pc, #144]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001756:	68ab      	ldr	r3, [r5, #8]
 8001758:	684a      	ldr	r2, [r1, #4]
 800175a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800175e:	431a      	orrs	r2, r3
 8001760:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001762:	f010 0010 	ands.w	r0, r0, #16
 8001766:	d01b      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800176a:	68e9      	ldr	r1, [r5, #12]
 800176c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800176e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001770:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001774:	430b      	orrs	r3, r1
 8001776:	6053      	str	r3, [r2, #4]
 8001778:	e012      	b.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800177a:	2600      	movs	r6, #0
 800177c:	e7d4      	b.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001786:	f7ff f973 	bl	8000a70 <HAL_GetTick>
 800178a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	05d8      	lsls	r0, r3, #23
 8001790:	d4ce      	bmi.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff f96d 	bl	8000a70 <HAL_GetTick>
 8001796:	eba0 0008 	sub.w	r0, r0, r8
 800179a:	2864      	cmp	r0, #100	; 0x64
 800179c:	d9f6      	bls.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800179e:	2003      	movs	r0, #3
}
 80017a0:	b002      	add	sp, #8
 80017a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017a6:	686a      	ldr	r2, [r5, #4]
 80017a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d0c3      	beq.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80017b0:	2001      	movs	r0, #1
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017b4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80017b6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017ba:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80017c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017c6:	07d9      	lsls	r1, r3, #31
 80017c8:	d5b6      	bpl.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80017ca:	f7ff f951 	bl	8000a70 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017d2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	6a23      	ldr	r3, [r4, #32]
 80017d6:	079a      	lsls	r2, r3, #30
 80017d8:	d4ae      	bmi.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f949 	bl	8000a70 <HAL_GetTick>
 80017de:	1bc0      	subs	r0, r0, r7
 80017e0:	4540      	cmp	r0, r8
 80017e2:	d9f7      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80017e4:	e7db      	b.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42420000 	.word	0x42420000

080017f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80017f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80017f8:	461c      	mov	r4, r3
 80017fa:	4616      	mov	r6, r2
 80017fc:	460f      	mov	r7, r1
 80017fe:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001800:	f7ff f936 	bl	8000a70 <HAL_GetTick>
 8001804:	4434      	add	r4, r6
 8001806:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001808:	f7ff f932 	bl	8000a70 <HAL_GetTick>
 800180c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001816:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001818:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800181a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800181c:	6893      	ldr	r3, [r2, #8]
 800181e:	ea37 0303 	bics.w	r3, r7, r3
 8001822:	d001      	beq.n	8001828 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8001824:	2000      	movs	r0, #0
 8001826:	e02e      	b.n	8001886 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8001828:	1c73      	adds	r3, r6, #1
 800182a:	d0f7      	beq.n	800181c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800182c:	f7ff f920 	bl	8000a70 <HAL_GetTick>
 8001830:	eba0 0008 	sub.w	r0, r0, r8
 8001834:	42a0      	cmp	r0, r4
 8001836:	d329      	bcc.n	800188c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001840:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001842:	686a      	ldr	r2, [r5, #4]
 8001844:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001848:	d10a      	bne.n	8001860 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800184a:	68aa      	ldr	r2, [r5, #8]
 800184c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001850:	d002      	beq.n	8001858 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001852:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001856:	d103      	bne.n	8001860 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800185e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001860:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001862:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001866:	d107      	bne.n	8001878 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001876:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001878:	2301      	movs	r3, #1
 800187a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800187e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001882:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001886:	b002      	add	sp, #8
 8001888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800188c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800188e:	2b00      	cmp	r3, #0
      count--;
 8001890:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001892:	bf08      	it	eq
 8001894:	2400      	moveq	r4, #0
      count--;
 8001896:	3b01      	subs	r3, #1
 8001898:	e7be      	b.n	8001818 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018a4:	460a      	mov	r2, r1
 80018a6:	2180      	movs	r1, #128	; 0x80
{
 80018a8:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	f7ff ffa3 	bl	80017f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80018ae:	b120      	cbz	r0, 80018ba <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80018b0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80018ba:	bd10      	pop	{r4, pc}

080018bc <HAL_SPI_Init>:
{
 80018bc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80018be:	4604      	mov	r4, r0
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d051      	beq.n	8001968 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d14a      	bne.n	8001960 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ca:	6842      	ldr	r2, [r0, #4]
 80018cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80018d0:	d000      	beq.n	80018d4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80018d8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80018dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018e0:	b923      	cbnz	r3, 80018ec <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80018e2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80018e4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80018e8:	f7fe fe3a 	bl	8000560 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80018ec:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80018ee:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80018f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80018f4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018f6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80018f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018fc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018fe:	6863      	ldr	r3, [r4, #4]
 8001900:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001904:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001908:	4303      	orrs	r3, r0
 800190a:	68e0      	ldr	r0, [r4, #12]
 800190c:	69a1      	ldr	r1, [r4, #24]
 800190e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001912:	4303      	orrs	r3, r0
 8001914:	6920      	ldr	r0, [r4, #16]
 8001916:	f000 0002 	and.w	r0, r0, #2
 800191a:	4303      	orrs	r3, r0
 800191c:	6960      	ldr	r0, [r4, #20]
 800191e:	f000 0001 	and.w	r0, r0, #1
 8001922:	4303      	orrs	r3, r0
 8001924:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001928:	4303      	orrs	r3, r0
 800192a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800192c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800192e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001932:	4303      	orrs	r3, r0
 8001934:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001936:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800193a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800193e:	4303      	orrs	r3, r0
 8001940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001942:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001946:	4303      	orrs	r3, r0
 8001948:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800194a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800194c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800194e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001954:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001956:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001958:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800195a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800195e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001960:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001966:	e7b5      	b.n	80018d4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001968:	2001      	movs	r0, #1
 800196a:	e7f8      	b.n	800195e <HAL_SPI_Init+0xa2>

0800196c <HAL_SPI_TransmitReceive>:
{
 800196c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001970:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001972:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001976:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001978:	2b01      	cmp	r3, #1
{
 800197a:	460d      	mov	r5, r1
 800197c:	4691      	mov	r9, r2
 800197e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001980:	f000 80e6 	beq.w	8001b50 <HAL_SPI_TransmitReceive+0x1e4>
 8001984:	2301      	movs	r3, #1
 8001986:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800198a:	f7ff f871 	bl	8000a70 <HAL_GetTick>
  tmp_state           = hspi->State;
 800198e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001992:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001994:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8001996:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8001998:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800199a:	d00a      	beq.n	80019b2 <HAL_SPI_TransmitReceive+0x46>
 800199c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80019a0:	f040 80d4 	bne.w	8001b4c <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019a4:	68a3      	ldr	r3, [r4, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80d0 	bne.w	8001b4c <HAL_SPI_TransmitReceive+0x1e0>
 80019ac:	2904      	cmp	r1, #4
 80019ae:	f040 80cd 	bne.w	8001b4c <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019b2:	2d00      	cmp	r5, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_SPI_TransmitReceive+0xcc>
 80019b6:	f1b9 0f00 	cmp.w	r9, #0
 80019ba:	d03d      	beq.n	8001a38 <HAL_SPI_TransmitReceive+0xcc>
 80019bc:	2e00      	cmp	r6, #0
 80019be:	d03b      	beq.n	8001a38 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019c4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019c8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019ca:	bf1c      	itt	ne
 80019cc:	2305      	movne	r3, #5
 80019ce:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80019d6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019da:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80019dc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80019de:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019e0:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80019e2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019e4:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80019e6:	bf58      	it	pl
 80019e8:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80019ea:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80019ec:	bf58      	it	pl
 80019ee:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80019f2:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80019f4:	bf58      	it	pl
 80019f6:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019f8:	68e1      	ldr	r1, [r4, #12]
 80019fa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80019fe:	d152      	bne.n	8001aa6 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a00:	b10a      	cbz	r2, 8001a06 <HAL_SPI_TransmitReceive+0x9a>
 8001a02:	2e01      	cmp	r6, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a06:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001a0a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a0e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001a16:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b973      	cbnz	r3, 8001a3c <HAL_SPI_TransmitReceive+0xd0>
 8001a1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b95b      	cbnz	r3, 8001a3c <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a24:	4642      	mov	r2, r8
 8001a26:	4639      	mov	r1, r7
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff ff39 	bl	80018a0 <SPI_EndRxTxTransaction>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	f000 8081 	beq.w	8001b36 <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a34:	2320      	movs	r3, #32
 8001a36:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	e02b      	b.n	8001a94 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a3c:	6821      	ldr	r1, [r4, #0]
 8001a3e:	688b      	ldr	r3, [r1, #8]
 8001a40:	079e      	lsls	r6, r3, #30
 8001a42:	d50d      	bpl.n	8001a60 <HAL_SPI_TransmitReceive+0xf4>
 8001a44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b153      	cbz	r3, 8001a60 <HAL_SPI_TransmitReceive+0xf4>
 8001a4a:	b14d      	cbz	r5, 8001a60 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8001a4c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a50:	f833 2b02 	ldrh.w	r2, [r3], #2
 8001a54:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a56:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a60:	688a      	ldr	r2, [r1, #8]
 8001a62:	f012 0201 	ands.w	r2, r2, #1
 8001a66:	d00c      	beq.n	8001a82 <HAL_SPI_TransmitReceive+0x116>
 8001a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b14b      	cbz	r3, 8001a82 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8001a6e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a70:	68c9      	ldr	r1, [r1, #12]
 8001a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a74:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a78:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001a7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a82:	f7fe fff5 	bl	8000a70 <HAL_GetTick>
 8001a86:	eba0 0008 	sub.w	r0, r0, r8
 8001a8a:	42b8      	cmp	r0, r7
 8001a8c:	d3c4      	bcc.n	8001a18 <HAL_SPI_TransmitReceive+0xac>
 8001a8e:	1c78      	adds	r0, r7, #1
 8001a90:	d0c2      	beq.n	8001a18 <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001aa0:	b003      	add	sp, #12
 8001aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa6:	b10a      	cbz	r2, 8001aac <HAL_SPI_TransmitReceive+0x140>
 8001aa8:	2e01      	cmp	r6, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aac:	782a      	ldrb	r2, [r5, #0]
 8001aae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001ab6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001abe:	2501      	movs	r5, #1
 8001ac0:	e02d      	b.n	8001b1e <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	6893      	ldr	r3, [r2, #8]
 8001ac6:	0799      	lsls	r1, r3, #30
 8001ac8:	d50e      	bpl.n	8001ae8 <HAL_SPI_TransmitReceive+0x17c>
 8001aca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b15b      	cbz	r3, 8001ae8 <HAL_SPI_TransmitReceive+0x17c>
 8001ad0:	b155      	cbz	r5, 8001ae8 <HAL_SPI_TransmitReceive+0x17c>
        txallowed = 0U;
 8001ad2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001ada:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001adc:	3301      	adds	r3, #1
 8001ade:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ae0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	6891      	ldr	r1, [r2, #8]
 8001aec:	f011 0101 	ands.w	r1, r1, #1
 8001af0:	d00d      	beq.n	8001b0e <HAL_SPI_TransmitReceive+0x1a2>
 8001af2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b153      	cbz	r3, 8001b0e <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 1U;
 8001af8:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001afa:	68d2      	ldr	r2, [r2, #12]
 8001afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b02:	3301      	adds	r3, #1
 8001b04:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b0e:	f7fe ffaf 	bl	8000a70 <HAL_GetTick>
 8001b12:	eba0 0008 	sub.w	r0, r0, r8
 8001b16:	42b8      	cmp	r0, r7
 8001b18:	d30a      	bcc.n	8001b30 <HAL_SPI_TransmitReceive+0x1c4>
 8001b1a:	1c7b      	adds	r3, r7, #1
 8001b1c:	d1b9      	bne.n	8001a92 <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1cd      	bne.n	8001ac2 <HAL_SPI_TransmitReceive+0x156>
 8001b26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1c9      	bne.n	8001ac2 <HAL_SPI_TransmitReceive+0x156>
 8001b2e:	e779      	b.n	8001a24 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b30:	2f00      	cmp	r7, #0
 8001b32:	d1f4      	bne.n	8001b1e <HAL_SPI_TransmitReceive+0x1b2>
 8001b34:	e7ad      	b.n	8001a92 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ab      	bne.n	8001a94 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	9001      	str	r0, [sp, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	9b01      	ldr	r3, [sp, #4]
 8001b4a:	e7a3      	b.n	8001a94 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	e7a1      	b.n	8001a94 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8001b50:	2002      	movs	r0, #2
 8001b52:	e7a5      	b.n	8001aa0 <HAL_SPI_TransmitReceive+0x134>

08001b54 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b54:	6a03      	ldr	r3, [r0, #32]
{
 8001b56:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b62:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b6a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b6e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001b72:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b74:	4d0a      	ldr	r5, [pc, #40]	; (8001ba0 <TIM_OC1_SetConfig+0x4c>)
 8001b76:	42a8      	cmp	r0, r5
 8001b78:	d10b      	bne.n	8001b92 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b7c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001b80:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b82:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b86:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001b8a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b90:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b94:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b96:	684a      	ldr	r2, [r1, #4]
 8001b98:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9a:	6203      	str	r3, [r0, #32]
}
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ba4:	6a03      	ldr	r3, [r0, #32]
{
 8001ba6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bb2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bb6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bbc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bc6:	4d0b      	ldr	r5, [pc, #44]	; (8001bf4 <TIM_OC3_SetConfig+0x50>)
 8001bc8:	42a8      	cmp	r0, r5
 8001bca:	d10d      	bne.n	8001be8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bcc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bd6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001bda:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001bde:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001be4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bec:	684a      	ldr	r2, [r1, #4]
 8001bee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf0:	6203      	str	r3, [r0, #32]
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	40012c00 	.word	0x40012c00

08001bf8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bf8:	6a03      	ldr	r3, [r0, #32]
{
 8001bfa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c06:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c12:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1c:	4d06      	ldr	r5, [pc, #24]	; (8001c38 <TIM_OC4_SetConfig+0x40>)
 8001c1e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c20:	bf02      	ittt	eq
 8001c22:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c24:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c28:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c2c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c2e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c30:	684a      	ldr	r2, [r1, #4]
 8001c32:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c34:	6203      	str	r3, [r0, #32]
}
 8001c36:	bd30      	pop	{r4, r5, pc}
 8001c38:	40012c00 	.word	0x40012c00

08001c3c <HAL_TIM_PWM_MspInit>:
 8001c3c:	4770      	bx	lr
	...

08001c40 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <TIM_Base_SetConfig+0x5c>)
{
 8001c42:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c44:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001c46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c48:	d005      	beq.n	8001c56 <TIM_Base_SetConfig+0x16>
 8001c4a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c4e:	d002      	beq.n	8001c56 <TIM_Base_SetConfig+0x16>
 8001c50:	4c13      	ldr	r4, [pc, #76]	; (8001ca0 <TIM_Base_SetConfig+0x60>)
 8001c52:	42a0      	cmp	r0, r4
 8001c54:	d110      	bne.n	8001c78 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 8001c56:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c5c:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001c5e:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c62:	d005      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c68:	d002      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <TIM_Base_SetConfig+0x60>)
 8001c6c:	4290      	cmp	r0, r2
 8001c6e:	d103      	bne.n	8001c78 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c70:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c76:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c78:	694a      	ldr	r2, [r1, #20]
 8001c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c80:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c82:	688b      	ldr	r3, [r1, #8]
 8001c84:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c86:	680b      	ldr	r3, [r1, #0]
 8001c88:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <TIM_Base_SetConfig+0x5c>)
 8001c8c:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001c8e:	bf04      	itt	eq
 8001c90:	690b      	ldreq	r3, [r1, #16]
 8001c92:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001c94:	2301      	movs	r3, #1
 8001c96:	6143      	str	r3, [r0, #20]
}
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <HAL_TIM_Base_Init>:
{
 8001ca4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	b330      	cbz	r0, 8001cf8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001caa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cb2:	b91b      	cbnz	r3, 8001cbc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001cb8:	f7fe fc8c 	bl	80005d4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc4:	1d21      	adds	r1, r4, #4
 8001cc6:	f7ff ffbb 	bl	8001c40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cca:	2301      	movs	r3, #1
  return HAL_OK;
 8001ccc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001cd6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001cda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001cde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001cf6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	e7fc      	b.n	8001cf6 <HAL_TIM_Base_Init+0x52>

08001cfc <HAL_TIM_PWM_Init>:
{
 8001cfc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b330      	cbz	r0, 8001d50 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d0a:	b91b      	cbnz	r3, 8001d14 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001d10:	f7ff ff94 	bl	8001c3c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d16:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	1d21      	adds	r1, r4, #4
 8001d1e:	f7ff ff8f 	bl	8001c40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d22:	2301      	movs	r3, #1
  return HAL_OK;
 8001d24:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001d2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001d32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001d4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1
 8001d52:	e7fc      	b.n	8001d4e <HAL_TIM_PWM_Init+0x52>

08001d54 <HAL_TIM_Encoder_Init>:
{
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	460d      	mov	r5, r1
  if (htim == NULL)
 8001d58:	4604      	mov	r4, r0
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d04d      	beq.n	8001dfa <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d66:	b91b      	cbnz	r3, 8001d70 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001d68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001d6c:	f7fe fc46 	bl	80005fc <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d72:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d78:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d7c:	6883      	ldr	r3, [r0, #8]
 8001d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d82:	f023 0307 	bic.w	r3, r3, #7
 8001d86:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d88:	f7ff ff5a 	bl	8001c40 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001d8e:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001d90:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001d92:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d94:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8001d96:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d98:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d9e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001da2:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001da6:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001da8:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001dac:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001dae:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001db6:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8001db8:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001dbe:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001dc2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001dc6:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001dc8:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001dca:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001dce:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001dd0:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001dd2:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001dd6:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001dd8:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dda:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001ddc:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8001dde:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001de4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	e7fc      	b.n	8001df8 <HAL_TIM_Encoder_Init+0xa4>
	...

08001e00 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e00:	6a03      	ldr	r3, [r0, #32]
{
 8001e02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e04:	f023 0310 	bic.w	r3, r3, #16
 8001e08:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e0a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e0c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e0e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e1c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e24:	4d0b      	ldr	r5, [pc, #44]	; (8001e54 <TIM_OC2_SetConfig+0x54>)
 8001e26:	42a8      	cmp	r0, r5
 8001e28:	d10d      	bne.n	8001e46 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e2a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e34:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e38:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001e3c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e42:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001e46:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e48:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e4a:	684a      	ldr	r2, [r1, #4]
 8001e4c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e4e:	6203      	str	r3, [r0, #32]
}
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00

08001e58 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d052      	beq.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0xb2>
 8001e64:	2301      	movs	r3, #1
  switch (Channel)
 8001e66:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001e68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_TIM_PWM_ConfigChannel+0x90>
 8001e6e:	d806      	bhi.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x26>
 8001e70:	b1c2      	cbz	r2, 8001ea4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8001e72:	2a04      	cmp	r2, #4
 8001e74:	d027      	beq.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001e7e:	2a0c      	cmp	r2, #12
 8001e80:	d1f9      	bne.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e82:	6800      	ldr	r0, [r0, #0]
 8001e84:	f7ff feb8 	bl	8001bf8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e88:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e8a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ea2:	e030      	b.n	8001f06 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea4:	6800      	ldr	r0, [r0, #0]
 8001ea6:	f7ff fe55 	bl	8001b54 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eaa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	f042 0208 	orr.w	r2, r2, #8
 8001eb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	f022 0204 	bic.w	r2, r2, #4
 8001ebc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ec2:	619a      	str	r2, [r3, #24]
      break;
 8001ec4:	e7d7      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec6:	6800      	ldr	r0, [r0, #0]
 8001ec8:	f7ff ff9a 	bl	8001e00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ecc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ece:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ee6:	e7ec      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	f7ff fe5b 	bl	8001ba4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ef0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	f042 0208 	orr.w	r2, r2, #8
 8001ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	f022 0204 	bic.w	r2, r2, #4
 8001f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f06:	61da      	str	r2, [r3, #28]
      break;
 8001f08:	e7b5      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	e7b6      	b.n	8001e7c <HAL_TIM_PWM_ConfigChannel+0x24>

08001f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f0e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f10:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f12:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f18:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001f1c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f1e:	6082      	str	r2, [r0, #8]
}
 8001f20:	bd10      	pop	{r4, pc}

08001f22 <HAL_TIM_ConfigClockSource>:
{
 8001f22:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f28:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f04f 0002 	mov.w	r0, #2
 8001f30:	d027      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x60>
 8001f32:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f38:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001f3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f48:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f4a:	680b      	ldr	r3, [r1, #0]
 8001f4c:	2b60      	cmp	r3, #96	; 0x60
 8001f4e:	d04d      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0xca>
 8001f50:	d832      	bhi.n	8001fb8 <HAL_TIM_ConfigClockSource+0x96>
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d062      	beq.n	800201c <HAL_TIM_ConfigClockSource+0xfa>
 8001f56:	d815      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x62>
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d003      	beq.n	8001f64 <HAL_TIM_ConfigClockSource+0x42>
 8001f5c:	d809      	bhi.n	8001f72 <HAL_TIM_ConfigClockSource+0x50>
 8001f5e:	f033 0210 	bics.w	r2, r3, #16
 8001f62:	d108      	bne.n	8001f76 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8001f64:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f043 0307 	orr.w	r3, r3, #7
 8001f70:	e020      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001f72:	2b30      	cmp	r3, #48	; 0x30
 8001f74:	d0f6      	beq.n	8001f64 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8001f76:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f7e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f84:	2b50      	cmp	r3, #80	; 0x50
 8001f86:	d1f6      	bne.n	8001f76 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f88:	684a      	ldr	r2, [r1, #4]
 8001f8a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f8c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f8e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f90:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f94:	f025 0501 	bic.w	r5, r5, #1
 8001f98:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001f9c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fa2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001fa6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fa8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001faa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001fb4:	6083      	str	r3, [r0, #8]
}
 8001fb6:	e7de      	b.n	8001f76 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d00c      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xb4>
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc0:	d1d9      	bne.n	8001f76 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc2:	68cb      	ldr	r3, [r1, #12]
 8001fc4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001fc8:	f7ff ffa1 	bl	8001f0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	6893      	ldr	r3, [r2, #8]
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	e008      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001fd6:	68cb      	ldr	r3, [r1, #12]
 8001fd8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001fdc:	f7ff ff97 	bl	8001f0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe8:	6093      	str	r3, [r2, #8]
      break;
 8001fea:	e7c4      	b.n	8001f76 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fec:	684d      	ldr	r5, [r1, #4]
 8001fee:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff0:	6a01      	ldr	r1, [r0, #32]
 8001ff2:	f021 0110 	bic.w	r1, r1, #16
 8001ff6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ffa:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ffc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002004:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002008:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800200c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800200e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002010:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002016:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800201a:	e7cb      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201c:	684a      	ldr	r2, [r1, #4]
 800201e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002020:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002022:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002024:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002028:	f025 0501 	bic.w	r5, r5, #1
 800202c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002030:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002036:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800203a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800203c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800203e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002044:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002048:	e7b4      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x92>

0800204a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800204a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800204c:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800204e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002050:	f001 011f 	and.w	r1, r1, #31
 8002054:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002056:	ea23 0304 	bic.w	r3, r3, r4
 800205a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800205c:	6a03      	ldr	r3, [r0, #32]
 800205e:	408a      	lsls	r2, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	6202      	str	r2, [r0, #32]
}
 8002064:	bd10      	pop	{r4, pc}
	...

08002068 <HAL_TIM_OC_Start>:
{
 8002068:	b510      	push	{r4, lr}
 800206a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206c:	b929      	cbnz	r1, 800207a <HAL_TIM_OC_Start+0x12>
 800206e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002072:	2b01      	cmp	r3, #1
 8002074:	d021      	beq.n	80020ba <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
}
 8002078:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800207a:	2904      	cmp	r1, #4
 800207c:	d107      	bne.n	800208e <HAL_TIM_OC_Start+0x26>
 800207e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002082:	2b01      	cmp	r3, #1
 8002084:	d1f7      	bne.n	8002076 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002086:	2302      	movs	r3, #2
 8002088:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800208c:	e018      	b.n	80020c0 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800208e:	2908      	cmp	r1, #8
 8002090:	d107      	bne.n	80020a2 <HAL_TIM_OC_Start+0x3a>
 8002092:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002096:	2b01      	cmp	r3, #1
 8002098:	d1ed      	bne.n	8002076 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800209a:	2302      	movs	r3, #2
 800209c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020a0:	e00e      	b.n	80020c0 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d1e5      	bne.n	8002076 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020aa:	2904      	cmp	r1, #4
 80020ac:	d0eb      	beq.n	8002086 <HAL_TIM_OC_Start+0x1e>
 80020ae:	2908      	cmp	r1, #8
 80020b0:	d0f3      	beq.n	800209a <HAL_TIM_OC_Start+0x32>
 80020b2:	2302      	movs	r3, #2
 80020b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80020b8:	e002      	b.n	80020c0 <HAL_TIM_OC_Start+0x58>
 80020ba:	2302      	movs	r3, #2
 80020bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020c0:	2201      	movs	r2, #1
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	f7ff ffc1 	bl	800204a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_TIM_OC_Start+0x94>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10a      	bne.n	80020e6 <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 80020d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	2a06      	cmp	r2, #6
 80020e0:	d107      	bne.n	80020f2 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 80020e2:	2000      	movs	r0, #0
 80020e4:	e7c8      	b.n	8002078 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d0f5      	beq.n	80020d8 <HAL_TIM_OC_Start+0x70>
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_TIM_OC_Start+0x98>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d0f2      	beq.n	80020d8 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e7f2      	b.n	80020e2 <HAL_TIM_OC_Start+0x7a>
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400

08002104 <HAL_TIM_PWM_Start>:
 8002104:	f7ff bfb0 	b.w	8002068 <HAL_TIM_OC_Start>

08002108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002108:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800210a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 800210e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002110:	2a01      	cmp	r2, #1
 8002112:	f04f 0002 	mov.w	r0, #2
 8002116:	d01e      	beq.n	8002156 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002118:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800211a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800211e:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002120:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002122:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002126:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002128:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800212a:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212c:	4c0a      	ldr	r4, [pc, #40]	; (8002158 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800212e:	42a2      	cmp	r2, r4
 8002130:	d006      	beq.n	8002140 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002132:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002136:	d003      	beq.n	8002140 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002138:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800213c:	42a2      	cmp	r2, r4
 800213e:	d104      	bne.n	800214a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002140:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002142:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002146:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002148:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800214a:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 800214c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002152:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	40012c00 	.word	0x40012c00

0800215c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800215c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d01f      	beq.n	80021a4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002164:	68cb      	ldr	r3, [r1, #12]
 8002166:	688a      	ldr	r2, [r1, #8]
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800216e:	684a      	ldr	r2, [r1, #4]
 8002170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002174:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002176:	680a      	ldr	r2, [r1, #0]
 8002178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800217e:	690a      	ldr	r2, [r1, #16]
 8002180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002184:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002186:	694a      	ldr	r2, [r1, #20]
 8002188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800218c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800218e:	69ca      	ldr	r2, [r1, #28]
 8002190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002194:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002196:	6802      	ldr	r2, [r0, #0]
 8002198:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800219a:	2300      	movs	r3, #0
 800219c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80021a0:	4618      	mov	r0, r3
 80021a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80021a4:	2002      	movs	r0, #2
}
 80021a6:	4770      	bx	lr

080021a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ac:	6803      	ldr	r3, [r0, #0]
 80021ae:	68c1      	ldr	r1, [r0, #12]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021b6:	430a      	orrs	r2, r1
 80021b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ba:	6882      	ldr	r2, [r0, #8]
 80021bc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80021be:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021c0:	4302      	orrs	r2, r0
 80021c2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80021c4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80021c8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021cc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80021ce:	430a      	orrs	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	69a1      	ldr	r1, [r4, #24]
 80021d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021da:	430a      	orrs	r2, r1
 80021dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <UART_SetConfig+0x70>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d115      	bne.n	8002210 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021e4:	f7ff fa7c 	bl	80016e0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021e8:	2319      	movs	r3, #25
 80021ea:	4343      	muls	r3, r0
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	6820      	ldr	r0, [r4, #0]
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f6:	2264      	movs	r2, #100	; 0x64
 80021f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80021fc:	fb02 3311 	mls	r3, r2, r1, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	fbb3 f3f2 	udiv	r3, r3, r2
 8002208:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800220c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800220e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002210:	f7ff fa56 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 8002214:	e7e8      	b.n	80021e8 <UART_SetConfig+0x40>
 8002216:	bf00      	nop
 8002218:	40013800 	.word	0x40013800

0800221c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	4604      	mov	r4, r0
 8002220:	460e      	mov	r6, r1
 8002222:	4617      	mov	r7, r2
 8002224:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002226:	6822      	ldr	r2, [r4, #0]
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	ea36 0303 	bics.w	r3, r6, r3
 800222e:	d101      	bne.n	8002234 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
 8002232:	e014      	b.n	800225e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002234:	1c6b      	adds	r3, r5, #1
 8002236:	d0f7      	beq.n	8002228 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002238:	b995      	cbnz	r5, 8002260 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800223a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800223c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002244:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800224e:	2320      	movs	r3, #32
 8002250:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002254:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002258:	2300      	movs	r3, #0
 800225a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002260:	f7fe fc06 	bl	8000a70 <HAL_GetTick>
 8002264:	1bc0      	subs	r0, r0, r7
 8002266:	4285      	cmp	r5, r0
 8002268:	d2dd      	bcs.n	8002226 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800226a:	e7e6      	b.n	800223a <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

0800226c <HAL_UART_Init>:
{
 800226c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800226e:	4604      	mov	r4, r0
 8002270:	b340      	cbz	r0, 80022c4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800227a:	b91b      	cbnz	r3, 8002284 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800227c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002280:	f7fe fa1c 	bl	80006bc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002286:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800228c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800228e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002294:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002296:	f7ff ff87 	bl	80021a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ac:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80022c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
 80022c6:	e7fc      	b.n	80022c2 <HAL_UART_Init+0x56>

080022c8 <HAL_UART_Transmit>:
{
 80022c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022cc:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80022ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80022d2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80022d4:	2b20      	cmp	r3, #32
{
 80022d6:	460e      	mov	r6, r1
 80022d8:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80022da:	d148      	bne.n	800236e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80022dc:	2900      	cmp	r1, #0
 80022de:	d044      	beq.n	800236a <HAL_UART_Transmit+0xa2>
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d042      	beq.n	800236a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80022e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d040      	beq.n	800236e <HAL_UART_Transmit+0xa6>
 80022ec:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80022f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80022fc:	f7fe fbb8 	bl	8000a70 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002302:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002308:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800230a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230c:	d103      	bne.n	8002316 <HAL_UART_Transmit+0x4e>
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	b90b      	cbnz	r3, 8002316 <HAL_UART_Transmit+0x4e>
 8002312:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002314:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8002316:	2300      	movs	r3, #0
 8002318:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800231c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800231e:	b29b      	uxth	r3, r3
 8002320:	b953      	cbnz	r3, 8002338 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	464b      	mov	r3, r9
 8002324:	4642      	mov	r2, r8
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff77 	bl	800221c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800232e:	b950      	cbnz	r0, 8002346 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002330:	2320      	movs	r3, #32
 8002332:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002336:	e007      	b.n	8002348 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002338:	464b      	mov	r3, r9
 800233a:	4642      	mov	r2, r8
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ff6c 	bl	800221c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002344:	b110      	cbz	r0, 800234c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
}
 8002348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800234e:	b94e      	cbnz	r6, 8002364 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002350:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002354:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002358:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800235a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800235c:	3901      	subs	r1, #1
 800235e:	b289      	uxth	r1, r1
 8002360:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002362:	e7db      	b.n	800231c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002364:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002368:	e7f6      	b.n	8002358 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800236a:	2001      	movs	r0, #1
 800236c:	e7ec      	b.n	8002348 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800236e:	2002      	movs	r0, #2
 8002370:	e7ea      	b.n	8002348 <HAL_UART_Transmit+0x80>

08002372 <HAL_UART_Receive>:
{
 8002372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002376:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002378:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 800237c:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800237e:	2b20      	cmp	r3, #32
{
 8002380:	460e      	mov	r6, r1
 8002382:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002384:	d14f      	bne.n	8002426 <HAL_UART_Receive+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002386:	2900      	cmp	r1, #0
 8002388:	d04b      	beq.n	8002422 <HAL_UART_Receive+0xb0>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d049      	beq.n	8002422 <HAL_UART_Receive+0xb0>
    __HAL_LOCK(huart);
 800238e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d047      	beq.n	8002426 <HAL_UART_Receive+0xb4>
 8002396:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800239a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800239e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a6:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80023a8:	f7fe fb62 	bl	8000a70 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80023ae:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80023b4:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023b8:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023bc:	d103      	bne.n	80023c6 <HAL_UART_Receive+0x54>
 80023be:	6923      	ldr	r3, [r4, #16]
 80023c0:	b90b      	cbnz	r3, 80023c6 <HAL_UART_Receive+0x54>
 80023c2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80023c4:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80023c6:	2300      	movs	r3, #0
 80023c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80023cc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80023ce:	b280      	uxth	r0, r0
 80023d0:	b920      	cbnz	r0, 80023dc <HAL_UART_Receive+0x6a>
    huart->RxState = HAL_UART_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80023d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4642      	mov	r2, r8
 80023e0:	2120      	movs	r1, #32
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff ff1a 	bl	800221c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80023e8:	b9f8      	cbnz	r0, 800242a <HAL_UART_Receive+0xb8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ea:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80023ec:	b94e      	cbnz	r6, 8002402 <HAL_UART_Receive+0x90>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f4:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80023f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002400:	e7e4      	b.n	80023cc <HAL_UART_Receive+0x5a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002402:	68a2      	ldr	r2, [r4, #8]
 8002404:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002408:	d002      	beq.n	8002410 <HAL_UART_Receive+0x9e>
 800240a:	b932      	cbnz	r2, 800241a <HAL_UART_Receive+0xa8>
 800240c:	6922      	ldr	r2, [r4, #16]
 800240e:	b922      	cbnz	r2, 800241a <HAL_UART_Receive+0xa8>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	b2c9      	uxtb	r1, r1
 8002414:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002418:	e7ee      	b.n	80023f8 <HAL_UART_Receive+0x86>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002420:	e7f8      	b.n	8002414 <HAL_UART_Receive+0xa2>
      return  HAL_ERROR;
 8002422:	2001      	movs	r0, #1
 8002424:	e7d8      	b.n	80023d8 <HAL_UART_Receive+0x66>
    return HAL_BUSY;
 8002426:	2002      	movs	r0, #2
 8002428:	e7d6      	b.n	80023d8 <HAL_UART_Receive+0x66>
        return HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
 800242c:	e7d4      	b.n	80023d8 <HAL_UART_Receive+0x66>

0800242e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800242e:	b084      	sub	sp, #16
 8002430:	a801      	add	r0, sp, #4
 8002432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002436:	b004      	add	sp, #16
 8002438:	2000      	movs	r0, #0
 800243a:	4770      	bx	lr

0800243c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800243c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002444:	045b      	lsls	r3, r3, #17
 8002446:	0c5b      	lsrs	r3, r3, #17
 8002448:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800244c:	2000      	movs	r0, #0
 800244e:	4770      	bx	lr

08002450 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002450:	2000      	movs	r0, #0
 8002452:	4770      	bx	lr

08002454 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002454:	b084      	sub	sp, #16
 8002456:	b510      	push	{r4, lr}
 8002458:	4604      	mov	r4, r0
 800245a:	a803      	add	r0, sp, #12
 800245c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002460:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002462:	2301      	movs	r3, #1
 8002464:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002468:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800246c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002470:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8002474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002478:	b004      	add	sp, #16
 800247a:	4770      	bx	lr

0800247c <USB_DevDisconnect>:
 800247c:	2000      	movs	r0, #0
 800247e:	4770      	bx	lr

08002480 <__libc_init_array>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	2600      	movs	r6, #0
 8002484:	4d0c      	ldr	r5, [pc, #48]	; (80024b8 <__libc_init_array+0x38>)
 8002486:	4c0d      	ldr	r4, [pc, #52]	; (80024bc <__libc_init_array+0x3c>)
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	42a6      	cmp	r6, r4
 800248e:	d109      	bne.n	80024a4 <__libc_init_array+0x24>
 8002490:	f000 f822 	bl	80024d8 <_init>
 8002494:	2600      	movs	r6, #0
 8002496:	4d0a      	ldr	r5, [pc, #40]	; (80024c0 <__libc_init_array+0x40>)
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <__libc_init_array+0x44>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	42a6      	cmp	r6, r4
 80024a0:	d105      	bne.n	80024ae <__libc_init_array+0x2e>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a8:	4798      	blx	r3
 80024aa:	3601      	adds	r6, #1
 80024ac:	e7ee      	b.n	800248c <__libc_init_array+0xc>
 80024ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b2:	4798      	blx	r3
 80024b4:	3601      	adds	r6, #1
 80024b6:	e7f2      	b.n	800249e <__libc_init_array+0x1e>
 80024b8:	0800251c 	.word	0x0800251c
 80024bc:	0800251c 	.word	0x0800251c
 80024c0:	0800251c 	.word	0x0800251c
 80024c4:	08002520 	.word	0x08002520

080024c8 <memset>:
 80024c8:	4603      	mov	r3, r0
 80024ca:	4402      	add	r2, r0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d100      	bne.n	80024d2 <memset+0xa>
 80024d0:	4770      	bx	lr
 80024d2:	f803 1b01 	strb.w	r1, [r3], #1
 80024d6:	e7f9      	b.n	80024cc <memset+0x4>

080024d8 <_init>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	bf00      	nop
 80024dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024de:	bc08      	pop	{r3}
 80024e0:	469e      	mov	lr, r3
 80024e2:	4770      	bx	lr

080024e4 <_fini>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr
